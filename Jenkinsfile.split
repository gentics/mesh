// The GIT repository for this pipeline lib is defined in the global Jenkins setting
@Library('jenkins-pipeline-library')
import com.gentics.*

// Make the helpers aware of this jobs environment
JobContext.set(this)

properties([
	parameters([
		booleanParam(name: 'runTests',            defaultValue: true,  description: "Whether to run the unit tests"),
		booleanParam(name: 'splitTests',          defaultValue: true,  description: "Whether to split tests or not"),
		booleanParam(name: 'skipSearchTests',     defaultValue: false, description: "Whether to skip search tests or not"),
		booleanParam(name: 'runSonar',            defaultValue: false, description: "Whether to run the sonarqube checks"),
		booleanParam(name: 'runPerformanceTests', defaultValue: false, description: "Whether to run performance tests."),
		booleanParam(name: 'runClusterTests',     defaultValue: false, description: "Whether to run cluster tests."),
		booleanParam(name: 'runDeploy',           defaultValue: false, description: "Whether to run the deploy steps."),
		booleanParam(name: 'runDocker',           defaultValue: false, description: "Whether to run the docker steps."),
		booleanParam(name: 'runMavenBuild',       defaultValue: false, description: "Whether to run the maven build steps."),
		booleanParam(name: 'runIntegrationTests', defaultValue: false, description: "Whether to run integration tests.")
	])
])

final def gitCommitTag         = '[Jenkins | ' + env.JOB_BASE_NAME + ']';
final def splits = 40;
final def runs = 40;

stage("Setup Build Environment") {
	node("mesh-root-worker") {
		githubBuildStarted()
		try {
			stage("Checkout") {
				checkout scm
			}

			def branchName = GitHelper.fetchCurrentBranchName()
			def version = MavenHelper.getVersion()

			stage("Set Version") {
				if (Boolean.valueOf(params.runDeploy)) {
					if (version) {
						echo "Building version " + version
						version = MavenHelper.transformSnapshotToReleaseVersion(version)
						MavenHelper.setVersion(version)
					}
					//TODO only add pom.xml files
					sh 'git add .'
					sh "git commit -m 'Raise version'"
					GitHelper.addTag(version, 'Release of version ' + version)
				}
			}

			stage("Prebuild") {
				if (Boolean.valueOf(params.runTests)) {
					// Install is needed to provide deps for the test plugin build
					sh "mvn -ff -B -U -Dmaven.javadoc.skip=true -Dskip.cluster.tests=true -DskipTests clean install"
				} else {
				        echo "Omitted since we don't execute tests"
				}
			}

			stage("Test") {
				if (Boolean.valueOf(params.runTests)) {
					if (Boolean.valueOf(params.splitTests)) {
						if (Boolean.valueOf(params.skipSearchTests)) {
							sh ".jenkins/split-tests.sh ${splits} nosearch"
						} else {
							sh ".jenkins/split-tests.sh ${splits}"
						}
						stash includes: '**', name: 'project'
						def branches = [:]
						for (int i = 0; i < runs; i++) {
							def current = i
							branches["split${current}"] = {
								node('mesh-worker') {
									echo "Preparing slave environment for ${current}"
									sh "rm -rf split${current}"
									sh "mkdir split${current}"
									dir("split${current}") {
										unstash 'project'
										def postfix = current;
										if (current <= 9) {
											postfix = "0" + current
										}
										sshagent(["git"]) {
											try {
												sh ".jenkins/run-splits.sh includes-${postfix}"
												stash name: "jacoco" + current, includes: "**/jacoco-partial.exec", allowEmpty: true
											} finally {
												step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/*.xml'])
												deleteDir()
											}
										}
									}
								}
							}
						}
						try {
							parallel branches
						} catch (err) {
							echo "Failed " + err.getMessage()
							error err.getMessage()
						}
					} else {
						sshagent(["git"]) {
							try {
								sh "mvn -fae -Dmaven.javadoc.skip=true -Dskip.cluster.tests=true -Dmaven.test.failure.ignore=true -B -U -e -pl '!ferma,!demo,!doc,!performance-tests' clean install"
							} finally {
								step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/*.xml'])
							}
						}
					}
				} else {
					echo "Tests skipped.."
				}
			}

			stage("Maven Build") {
				if (Boolean.valueOf(params.runMavenBuild)) {
					sshagent(["git"]) {
						if (Boolean.valueOf(params.runDeploy)) {
							withCredentials([usernamePassword(credentialsId: 'repo.gentics.com', usernameVariable: 'repoUsername', passwordVariable: 'repoPassword')]) {
								sh "mvn -U -B -DskipTests clean deploy"
							}
						} else {
							sh "mvn -B -DskipTests clean package"
						}
					}
				} else {
					echo "Maven build skipped.."
				}
			}

			stage ("Sonar") {
				if (Boolean.valueOf(params.runTests) && Boolean.valueOf(params.runSonar)) {
					if (Boolean.valueOf(params.splitTests)) {
						for (int i = 0; i < runs; i++) {
							echo "Invoking merge for " + i
							unstash "jacoco" + i
							sh "mvn jacoco:merge@merge-all-jacoco -Dskip.jacoco.merge=false"
							sh "find -name jacoco-partial.exec -exec rm {} \\;"
						}
					}

					withCredentials([string(credentialsId: 'sonarcloud.key', variable: 'TOKEN')]) {
						sh "mvn sonar:sonar -Dsonar.projectKey=gentics_mesh -Dsonar.organization=gentics -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=$TOKEN -Dsonar.pullrequest.key=$GITHUB_PR_NUMBER -Dsonar.pullrequest.branch=" + branchName + " -Dsonar.pullrequest.base=dev"
						//sh "mvn sonar:sonar -Dsonar.projectKey=mesh -Dsonar.host.url=https://sonarqube.apa.at -Dsonar.login=$TOKEN"
					}
				}
			}

			stage("Cluster Tests") {
				if (Boolean.valueOf(params.runClusterTests)) {
					stash includes: '**', name: 'project'
					node("mesh-cluster-worker") {
						try {
							unstash 'project'
							sh "mvn -B -DskipTests clean install -pl '!demo,!doc'"
							sh "mvn -B test -pl distributed"
						} finally {
							step([$class: 'JUnitResultArchiver', testResults: 'distributed/target/surefire-reports/*.xml'])
							deleteDir()
						}
					}
				} else {
					echo "Cluster tests skipped.."
				}
			}

			stage("Docker Build") {
				if (Boolean.valueOf(params.runDocker)) {
					// demo
					sh "rm demo/target/*sources.jar"
					sh "cd demo ; docker build --network=host -t gentics/mesh-demo:latest -t gentics/mesh-demo:" + version + " . "

					// server
					sh "rm server/target/*sources.jar"
					sh "cd server ; docker build --network=host -t gentics/mesh:latest -t gentics/mesh:" + version + " . "
				} else {
					echo "Docker build skipped.."
				}
			}

			stage("Performance Tests") {
				if (Boolean.valueOf(params.runPerformanceTests)) {
					stash includes: '**', name: 'project'
					node("mesh-performance-worker") {
						try {
							unstash 'project'
							sh "mvn -B -U clean package -pl '!doc,!demo,!distributed,!verticles,!server' -Dskip.unit.tests=true -Dskip.performance.tests=false -Dmaven.test.failure.ignore=true"
						} finally {
							step([$class: 'JUnitResultArchiver', testResults: '**/target/*.performance.xml'])
							deleteDir()
						}
					}
				} else {
					echo "Performance tests skipped.."
				}
			}

			stage("Integration Tests") {
				if (Boolean.valueOf(params.runIntegrationTests)) {
					withEnv(["MESH_VERSION=" + version]) {
						sh "integration-tests/test.sh"
					}
				} else {
					echo "Performance tests skipped.."
				}
			}

			stage("Deploy") {
				if (Boolean.valueOf(params.runDeploy)) {
					if (Boolean.valueOf(params.runDocker)) {
						withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'dockerhub_login', passwordVariable: 'DOCKER_HUB_PASSWORD', usernameVariable: 'DOCKER_HUB_USERNAME']]) {
							sh 'docker login -u $DOCKER_HUB_USERNAME -p $DOCKER_HUB_PASSWORD'
							sh 'docker push gentics/mesh-demo:latest'
							sh 'docker push gentics/mesh-demo:' + version
							sh 'docker push gentics/mesh:latest'
							sh 'docker push gentics/mesh:' + version
						}
					}
				} else {
					echo "Deploy skipped.."
				}
			}

			stage("Git push") {
				if (Boolean.valueOf(params.runDeploy)) {
					sshagent(["git"]) {
						def snapshotVersion = MavenHelper.getNextSnapShotVersion(version)
						MavenHelper.setVersion(snapshotVersion)
						GitHelper.addCommit('.', gitCommitTag + ' Prepare for the next development iteration (' + snapshotVersion + ')')
						GitHelper.pushBranch(branchName)
						GitHelper.pushTag(version)
					}
				} else {
					echo "Push skipped.."
				}
			}
		} catch (Exception e) {
			if (currentBuild.result == null || currentBuild.currentResult == "STABLE") {
				currentBuild.result = 'FAILURE'
				currentBuild.currentResult = 'FAILURE'
			}
			throw e
		} finally {
			deleteDir()
			githubBuildEnded()
			notifyMattermostUsers()
		}
	}
}