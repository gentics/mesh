// The GIT repository for this pipeline lib is defined in the global Jenkins setting
@Library('jenkins-pipeline-library')
import com.gentics.*

// Make the helpers aware of this jobs environment
JobContext.set(this)

properties([
	parameters([
		booleanParam(name: 'runTests',            defaultValue: true,  description: "Whether to run the unit tests"),
		booleanParam(name: 'splitTests',          defaultValue: true,  description: "Whether to split tests or not"),
		booleanParam(name: 'skipSearchTests',     defaultValue: false, description: "Whether to skip search tests or not"),
		booleanParam(name: 'runSonar',            defaultValue: false, description: "Whether to run the sonarqube checks"),
		booleanParam(name: 'runUnstableTests',    defaultValue: true,  description: "Whether to run tests in failing group."),
		booleanParam(name: 'runPerformanceTests', defaultValue: false, description: "Whether to run performance tests."),
		booleanParam(name: 'runClusterTests',     defaultValue: false, description: "Whether to run cluster tests."),
		booleanParam(name: 'runDeploy',           defaultValue: false, description: "Whether to run the deploy steps."),
		booleanParam(name: 'runDeployTesting',    defaultValue: false, description: "Whether to run the testing deploy steps."),
		booleanParam(name: 'runDocker',           defaultValue: false, description: "Whether to run the docker steps."),
		booleanParam(name: 'runMavenBuild',       defaultValue: false, description: "Whether to run the maven build steps."),
		booleanParam(name: 'setBranchAsVersion',  defaultValue: false, description: "Whether to set the branch name as project version (unless runDeploy is true). Use this together with runMavenBuild to install the maven artifacts to the local repository (demo and documentation will be skipped)."),
		booleanParam(name: 'runIntegrationTests', defaultValue: false, description: "Whether to run integration tests."),
		booleanParam(name: 'runMavenDeploy',      defaultValue: false, description: "Whether to deploy the maven artifact during the maven build step."),
		string(	     name: 'testingVersion',      defaultValue: "",    description: "Version for testing"),
	])
])

final def gitCommitTag         = '[Jenkins | ' + env.JOB_BASE_NAME + ']';
final def splits = 20;
final def runs = 20;
final def registryHostStaging	   = "gtx-docker-releases-staging-mesh.docker.apa-it.at";
final def registryHostTest	   = "gtx-docker-releases-test-system.docker.apa-it.at";

def registryHost = registryHostStaging;

stage("Setup Build Environment") {
	node("mesh-root-worker-11") {
		githubBuildStarted()
		try {
			stage("Checkout") {
				checkout scm
			}

			def branchName = GitHelper.fetchCurrentBranchName()
			def version = MavenHelper.getVersion()

			stage("Set Version") {
				if (Boolean.valueOf(params.runDeploy)) {
					if (version) {
						echo "Building version " + version
						version = MavenHelper.transformSnapshotToReleaseVersion(version)
						MavenHelper.setVersion(version)
					}
					//TODO only add pom.xml files
					sh 'git add .'
					sh "git commit -m 'Raise version'"
					GitHelper.addTag(version, 'Release of version ' + version)
				} else if (Boolean.valueOf(params.setBranchAsVersion)) {
					version = branchName
					echo "Building version " + version
					MavenHelper.setVersion(version)
				}
				
				if (Boolean.valueOf(params.runDeployTesting)) {
					if (params.testingVersion?.trim()) {
						version = params.testingVersion.trim()
						echo "Building version test build with name: " + version
						MavenHelper.setVersion(version)
					}
				}
			}

			stage("Prebuild") {
				if (Boolean.valueOf(params.runTests) || Boolean.valueOf(params.runUnstableTests) || Boolean.valueOf(params.runDeployTesting)) {
					def extraFlags = ""
					if (Boolean.valueOf(params.runSonar)) {
						extraFlags = "-Djacoco.skip=false"
					}
					// Install is needed to provide deps for the test plugin build
					echo "Setup of GPG"
					sh "gpg --no-tty --batch --import /mnt/credentials/gpg/gpg-public-key.asc"
					sh "gpg --no-tty --batch --import /mnt/credentials/gpg/gpg-secret-key.asc"
					withCredentials([usernamePassword(credentialsId: 'repo.gentics.com', usernameVariable: 'repoUsername', passwordVariable: 'repoPassword'),
					                 usernamePassword(credentialsId: 'gentics.gpg', usernameVariable: 'gpgKeyName', passwordVariable: 'gpgKeyPass')]) {
						sh "mvn -ff -B -U -Dmaven.javadoc.skip=true -Dskip.test-plugins=false -Dskip.cluster.tests=true -Dskip.vertx-hazelcast=true -Dgpg.skip=false -DskipTests ${extraFlags} clean install"
					}
				} else {
					echo "Omitted since we don't execute tests"
				}
			}

			stage("Test") {
				if (Boolean.valueOf(params.runTests)) {
					if (Boolean.valueOf(params.splitTests)) {
						if (Boolean.valueOf(params.skipSearchTests)) {
							sh ".jenkins/split-tests.sh ${splits} nosearch"
						} else {
							sh ".jenkins/split-tests.sh ${splits}"
						}
						stash includes: '**', name: 'project'
						def branches = [:]
						for (int i = 0; i < runs; i++) {
							def current = i
							branches["split${current}"] = {
								node('mesh-worker-11') {
									echo "Preparing slave environment for ${current}"
									sh "rm -rf split${current}"
									sh "mkdir split${current}"
									dir("split${current}") {
										unstash 'project'
										def postfix = current;
										if (current <= 9) {
											postfix = "0" + current
										}
										sshagent(["git"]) {
											try {
												def jacoco = Boolean.valueOf(params.runSonar);
												withCredentials([usernamePassword(credentialsId: 'repo.gentics.com', usernameVariable: 'repoUsername', passwordVariable: 'repoPassword')]) {
													sh 'docker login -u $repoUsername -p $repoPassword docker.apa-it.at'
													withEnv(["TESTCONTAINERS_RYUK_DISABLED=true"]) {
														sh ".jenkins/run-splits.sh includes-${postfix} ${jacoco} split${current}"
													}
												}
												stash name: "jacoco" + current, includes: "**/jacoco-partial.exec", allowEmpty: true
											} finally {
												step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/*.xml'])
												deleteDir()
											}
										}
									}
								}
							}
						}
						try {
							parallel branches
						} catch (err) {
							echo "Failed " + err.getMessage()
							error err.getMessage()
						}
					} else {
						sshagent(["git"]) {
							try {
								withEnv(["TESTCONTAINERS_RYUK_DISABLED=true"]) {
									sh "mvn -fae -Dsurefire.excludedGroups=com.gentics.mesh.test.category.FailingTests,com.gentics.mesh.test.category.ClusterTests,com.gentics.mesh.test.category.NativeGraphQLFilterTests -Dmaven.javadoc.skip=true -Dskip.cluster.tests=true -Dskip.vertx-hazelcast=true -Dmaven.test.failure.ignore=true -Dmesh.container.image.prefix=docker.apa-it.at/ -B -U -e -pl '!ferma,!demo/default,!doc,!performance-tests' clean install"
								}
							} finally {
								step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/*.xml'])
							}
						}
					}
				} else {
					echo "Tests skipped.."
				}
			}

			stage("Unstable Tests") {
				if (Boolean.valueOf(params.runUnstableTests)) {
					sshagent(["git"]) {
						try {
							withEnv(["TESTCONTAINERS_RYUK_DISABLED=true"]) {
								sh "mvn -fae -Dsurefire.groups=com.gentics.mesh.test.category.FailingTests,com.gentics.mesh.test.category.NativeGraphQLFilterTests -Dmaven.javadoc.skip=true -Dskip.cluster.tests=true -Dskip.vertx-hazelcast=true -Dmaven.test.failure.ignore=true -Dmesh.container.image.prefix=docker.apa-it.at/ -B -e -pl '!ferma,!demo/default,!doc,!performance-tests' test -DfailIfNoTests=false"
							}
						} finally {
							step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/*.xml'])
						}
					}
				} else {
					echo "Failing test group execution skipped.."
				}
			}

			stage("Maven Build") {
				if (Boolean.valueOf(params.runMavenBuild)) {
					sshagent(["git"]) {
						if (Boolean.valueOf(params.runDeploy) || Boolean.valueOf(params.runMavenDeploy)) {
							echo "Setup of GPG"
							sh "gpg --no-tty --batch --import /mnt/credentials/gpg/gpg-public-key.asc"
							sh "gpg --no-tty --batch --import /mnt/credentials/gpg/gpg-secret-key.asc"
							withCredentials([usernamePassword(credentialsId: 'repo.gentics.com', usernameVariable: 'repoUsername', passwordVariable: 'repoPassword'),usernamePassword(credentialsId: 'gentics.gpg', usernameVariable: 'gpgKeyName', passwordVariable: 'gpgKeyPass')]) {
								sh "mvn -U -B -DskipTests -Dgpg.skip=false clean deploy"
							}
						} else if (Boolean.valueOf(params.setBranchAsVersion)) {
							sh "mvn -B -DskipTests -pl '!demo/default,!doc' clean install"
						} else {
							sh "mvn -B -DskipTests clean package"
						}
					}
				} else {
					echo "Maven build skipped.."
				}
			}

			stage ("Sonar") {
				if (Boolean.valueOf(params.runTests) && Boolean.valueOf(params.runSonar)) {
					if (Boolean.valueOf(params.splitTests)) {
						for (int i = 0; i < runs; i++) {
							echo "Invoking merge for " + i
							unstash "jacoco" + i
							sh "mvn jacoco:merge@merge-all-jacoco -Djacoco.skip.merge=false"
							sh "find -name jacoco-partial.exec -exec rm {} \\;"
						}
					}

					withCredentials([string(credentialsId: 'sonarcloud.key', variable: 'TOKEN')]) {
						sh "mvn sonar:sonar -Dsonar.projectKey=gentics_mesh -Dsonar.organization=gentics -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=$TOKEN -Dsonar.pullrequest.key=$GITHUB_PR_NUMBER -Dsonar.pullrequest.branch=" + branchName + " -Dsonar.pullrequest.base=dev"
						//sh "mvn sonar:sonar -Dsonar.projectKey=mesh -Dsonar.host.url=https://sonarqube.apa.at -Dsonar.login=$TOKEN"
					}
				}
			}

			stage("Cluster Tests") {
				if (Boolean.valueOf(params.runClusterTests)) {
					stash includes: '**', name: 'project'
					node("mesh-cluster-worker-11") {
						try {
							unstash 'project'
							sh "mvn -B -DskipTests clean install -pl '!demo/default,!doc'"
							sh "mvn -B -Dsurefire.groups=com.gentics.mesh.test.category.ClusterTests -DfailIfNoTests=false -Dmesh.container.image.prefix=docker.apa-it.at/ test"
						} finally {
							step([$class: 'JUnitResultArchiver', testResults: 'distributed/target/surefire-reports/*.xml'])
							deleteDir()
						}
					}
				} else {
					echo "Cluster tests skipped.."
				}
			}

			stage("Docker Build") {
				if (Boolean.valueOf(params.runDocker)) {
					if (Boolean.valueOf(params.runDeployTesting)) {
						version = branchName;
						registryHost = registryHostTest;
					}

					// demo
					sh "rm demo/default/target/*sources.jar || true"
					sh "rm demo/default/target/*javadoc.jar || true"
					sh "cd demo/default ; docker build --network=host -t " + registryHost + "/gentics/mesh-demo:latest -t " + registryHost + "/gentics/mesh-demo:" + version + " . "

					// server
					sh "rm server/target/*sources.jar || true"
					sh "rm server/target/*javadoc.jar || true"
					sh "cd server ; docker build --network=host -t " + registryHost + "/gentics/mesh:latest -t " + registryHost + "/gentics/mesh:" + version + " . "
				} else {
					echo "Docker build skipped.."
				}
			}

			stage("Performance Tests") {
				if (Boolean.valueOf(params.runPerformanceTests)) {
					stash includes: '**', name: 'project'
					node("mesh-performance-worker-11") {
						try {
							unstash 'project'
							sh "mvn -B -U clean package -pl '!doc,!demo/default,!server' -Dskip.unit.tests=true -Dskip.cluster.tests=true -Dskip.vertx-hazelcast=true -Dskip.performance.tests=false -Dmaven.test.failure.ignore=true -Dmesh.container.image.prefix=docker.apa-it.at/"
						} finally {
							step([$class: 'JUnitResultArchiver', testResults: '**/target/*.performance.xml'])
							deleteDir()
						}
					}
				} else {
					echo "Performance tests skipped.."
				}
			}

			stage("Integration Tests") {
				if (Boolean.valueOf(params.runIntegrationTests)) {
					withEnv(["MESH_VERSION=" + version]) {
						sh "integration-tests/test.sh"
					}
				} else {
					echo "Performance tests skipped.."
				}
			}

			stage("Deploy") {
				if (Boolean.valueOf(params.runDeploy) || Boolean.valueOf(params.runDeployTesting)) {
					if (Boolean.valueOf(params.runDocker)) {
						if (Boolean.valueOf(params.runDeployTesting)) {
							version = branchName;
							registryHost = registryHostTest;
						}
						withCredentials([usernamePassword(credentialsId: 'repo.gentics.com', usernameVariable: 'repoUsername', passwordVariable: 'repoPassword')]) {
							sh 'docker login -u $repoUsername -p $repoPassword ' + registryHost

							if (Boolean.valueOf(params.runDeploy)) {
								sh 'docker push ' + registryHost + '/gentics/mesh-demo:latest'
								sh 'docker push ' + registryHost + '/gentics/mesh:latest'
							}

							sh 'docker push ' + registryHost + '/gentics/mesh-demo:' + version
							sh 'docker push ' + registryHost + '/gentics/mesh:' + version
						}
					}
				} else {
					echo "Deploy skipped.."
				}
			}

			stage("Git push") {
				if (Boolean.valueOf(params.runDeploy)) {
					sshagent(["git"]) {
						def snapshotVersion = MavenHelper.getNextSnapShotVersion(version)
						MavenHelper.setVersion(snapshotVersion)
						GitHelper.addCommit('.', gitCommitTag + ' Prepare for the next development iteration (' + snapshotVersion + ')')
						GitHelper.pushBranch(branchName)
						GitHelper.pushTag(version)
					}
				} else {
					echo "Push skipped.."
				}
			}
		} catch (Exception e) {
			// Temporary
			sh 'cat /home/jenkins/agent/workspace/mesh_ci-dev-test1/tests/tests-core/target/test-plugins/test-plugins/build.log'
			if (currentBuild.result == null || currentBuild.currentResult == "STABLE") {
				currentBuild.result = 'FAILURE'
				currentBuild.currentResult = 'FAILURE'
			}
			throw e
		} finally {
			deleteDir()
			githubBuildEnded()
			notifyMattermostUsers()
		}
	}
}
