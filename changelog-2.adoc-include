////
Note: this file (changelog-2.adoc-include) is generated automatically.
Do not make manual changes in this file, as they will be lost.

If you want to add changelog entries, create a new file in changelog/src/changelog/entries/... and run creation of the changelog with
mvn -pl changelog install
////

[[v2.1.21]]
== 2.1.21 (20.06.2025)

icon:plus[] Core: The following dependencies have been updated, to eliminate vulnerable versions:
 * Vert.x - to version `4.5.14`
 * Netty - to version `4.1.118.Final`

[[v2.1.20]]
== 2.1.20 (22.05.2025)

icon:check[] Plugins: If a static file handler fails to unpack the static resource to the plugin storage folder, currently a misleading `HTTP 404 binary_data_not_found` is thrown. This has been now changed to `HTTP 500` with a detailed failure description.

[[v2.1.19]]
== 2.1.19 (07.05.2025)

icon:check[] Auth: More occurrences of setting the `mesh.token` cookies have been secured with `HTTPOnly` flag.

[[v2.1.18]]
== 2.1.18 (23.04.2025)

icon:check[] S3: Now the language specific S3 fields are correctly processed.

[[v2.1.17]]
== 2.1.17 (25.03.2025)

icon:check[] S3: When a S3 image is transformed, the transformation result can be never returned to the client at some cases, because of a false cache path provided by the transformation service. This has been fixed.

icon:check[] Core: When an empty payload is sent to the binary field update function, a new version of a content, being updated, is produced, containing no changes. This has been now fixed, and the content stays old in this case. 

icon:check[] OAuth: If a new set of groups/roles has been attached to the Mesh user during the OAuth login session, these groups/roles are not used in the filtering during the same session. This has been fixed. 

icon:check[] Indexing: At some circumstances an indexing engine crash is possible, when the changes, triggering the (re)indexing on updated or deleted data, come too quickly. This has been fixed.

[[v2.1.16]]
== 2.1.16 (12.03.2025)

icon:check[] The dependency on nashorn-core has been updated to 15.6.
This fixes startup errors in plugins (like the comment plugin) which uses precompilation of handlebars templates to javascript.


icon:check[] Logging: Some sensitive configuration entries were eliminated from the logging.

[[v2.1.15]]
== 2.1.15 (25.02.2025)

icon:check[] Auth: The JWT auth cookie will now have the `HTTPOnly` flag set.


[[v2.1.14]]
== 2.1.14 (11.02.2025)

icon:check[] Image Manipulation: A periodic cleanup for files in the image cache has been added, which can be
configured with the new configuration options `image.imageCacheCleanInterval` (for the interval for running the cleanup)
and `image.imageCacheMaxIdle` (for the maximum allowed file age). Both values must be set in ISO 8601 duration format.
By default, `image.imageCacheCleanInterval` is set to `PT0S` (0 seconds), which deactivates the periodic cleanup.


[[v2.1.13]]
== 2.1.13 (29.01.2025)

icon:check[] Core: The processing of binaries has been refactored, targeting possible binary data leftovers being eliminated after the binary content is updated or deleted. Also, two new async consistency check have been added, for the detection of binary data with no corresponding database records (repairable) and binary database records with no corresponding binary data (for the automated testing purposes, not repairable).

[[v2.1.12]]
== 2.1.12 (16.01.2025)

icon:check[] GraphQL: Data fetchers have been speed up on native filtering of the nodes with node fields, by fixing the proper context detection, so complex multi-inclusion queries (navigation) run up to 10x faster.


icon:check[] Core: The node deletion rules has been strictened, to avoid internal deletion API misusage.

icon:check[] Auth: A crash on retrieving principal user's referenced node has been fixed.

icon:check[] Cache: The Image Cache refactoring, which was done in a previous hotfix release introduced an error which caused creation of empty folders in the old structure as well. This has been fixed.
Also the migration process has been fixed to really remove all folders of the old structure, even if they are empty or contain cache files of binaries that were deleted before.


icon:check[] GraphQL: A natively filtered paginated data set contains incorrect values for current page and total page number. This has been fixed.

[[v2.1.10]]
== 2.1.10 (06.11.2024)

icon:plus[] Core: Now it is possible to sort over binary metadata, node reference and micronode non-list fields.

[[v2.1.9]]
== 2.1.9 (23.10.2024)

icon:check[] Documentation: A missing query parameters documentation for the `/search` and `/{{project}}/search` has been added.

icon:check[] Cache: Image cache has been refactored, utilizing now simpler structure with less folder depth.

icon:check[] Core: A potential data loss on an edge case of node migration over several schema versions, including field name/type change, has been fixed.

[[v2.1.8]]
== 2.1.8 (09.10.2024)

icon:check[] Image Manipulation: The validation of resize width and height have been fixed to also properly handle values set to "auto" in the request.

icon:check[] GraphQL: The library for handling GraphQL Filters in Java has been updated to fix inconsistent behaviour when filtering nodes with fields of type "date" or "number",
which had the field set to null.
Before the fix, such nodes were never returned regardless of the used filter. Now the behaviour is identical to filters on fields of other types (such as "string" or "boolean") so that
null values will not natch when compared to non-null values, but the negation with "not" will match.


[[v2.1.7]]
== 2.1.7 (01.10.2024)

icon:check[] Core: A crash, caused by duplicated nodes in a GraphQL resulting set, has been fixed.

[[v2.1.6]]
== 2.1.6 (13.09.2024)

icon:check[] Core: The Vert.x Handlebars engine dependency has been patched, to replace the vulnerable Apache `commons-text` dependency, targeting `CVE-2022-42889`.

[[v2.1.5]]
== 2.1.5 (28.08.2024)

icon:check[] Core: A crash has been fixed on an attempt of (micro)node migration over non-adjacent (micro)schema versions.

[[v2.1.4]]
== 2.1.4 (07.08.2024)

icon:check[] Documentation: The check/repair API calls are better documented in regards of an async processing. The logging documentation is extended with format examples.

[[v2.1.3]]
== 2.1.3 (26.06.2024)

icon:check[] Elasticsearch: An Elasticsearch Java Client has been updated to the version 1.1.2, containing the corrections to the connection failure processing mechanism. The Elasticsearch activity idle checking has been improved to be more proof of the unstable connections.

[[v2.1.2]]
== 2.1.2 (13.05.2024)

icon:check[] GraphQL: A combination of similar queries with different names and filter parameters, running over native filtering, that produces incorrect results, has been fixed. 

[[v2.1.1]]
== 2.1.1 (02.05.2024)

icon:check[] The library used to process webp images has been changed due to JVM errors when running in an alpine based image.


[[v2.1.0]]
== 2.1.0 (26.04.2024)

icon:plus[] Core: Usage of application level protocol negotiation (aka ALPN) can be now configured via Mesh Options.


icon:plus[] Java Rest client: REST client can now choose the HTTP protocol version to use for the Mesh connection. Possible values: DEFAULT (current default support of the carrier HTTP client library, default value), HTTP_1_1, HTTP_2.


icon:plus[] Plugins: An option for connection over HTTP/2 for the Mesh plugins have been added.


icon:plus[] Image manipulation: Adds support for WebP images.

icon:plus[] The endpoint `GET /auth/login` now also supports login via the Authentication Bearer request header (using an API token).


icon:plus[] Core: The on-demand image manipulation feature has been refactored for DDoS protection. The new image manipulator option, `mode`, has been added with the following values: 
`ON_DEMAND` keeps already existing behaviour with creating/reusing the image variant automatically on each request, 
`MANUAL` requires an extra step of calling the image variant creation REST API prior to the variant serve, `OFF` disables the feature completely. A set of REST API calls has been added for the image variants manipulation. 
The GraphQL `nodes` call has been extended to filter/serve over the image variants of a selected binary field, if applicable.

icon:plus[] Search: Several enhancements have been applied to the content, sent to the search engine for the indexing. Each (micro)schema is presented a `noIndex` flag, marking the content of the (micro)schema as excluded from the indexing. Each (micro)schema field is presented a similar `noIndex` flag. 
By default no flag is set, meaning the content to be indexable. This feature serves security purposes, preventing the sensible information from leaking through the search engine. 

icon:plus[] REST: A new HttpServer option, `minifyJson`, has been added to control over the REST API payloads being pretty printed for readability, or minified for resource save. An analogous setting has been added to the Java `MeshRestClient`. 
Default value is `true`, so the payload minification is turned on, which is a @breaking@S change, if one expects the pretty-formatted output.

icon:plus[] Now it's possible to use generated Mesh API key for the login request, with `apikey` string body parameter.

icon:plus[] REST: A new 'languages' endpoint has been added, providing the list of the installed languages, as well as the lookup over UUID or 2-character language tag.

icon:plus[] Some dependencies have been updated:
* VertX: 4.5.7
* GraphQL: 21.5
* GraphQL Dataloader: 3.2.2
* PF4j: 3.11.0
* Hazelcast: 3.12.13
* Jackson: 2.17.0
* SnakeYAML: 2.2
* Log4j: 2.23.1
* SLF4j: 2.0.13
* Logback: 1.5.5
* Commons IO: 2.16.1
* RAML Parser: 0.8.40
* JSON Path: 2.9.0
* JSoup: 1.17.2
* Jettison: 1.5.4
* Netty: 4.1.108.Final
* Image IO: 3.10.1


icon:plus[] Mesh has been updated to Java 17 (LTS version).


[[v2.0.18]]
== 2.0.18 (20.03.2024)

icon:check[] GraphQL: A regression of missing common `and`, `or`, `not` top level filters has been fixed.

[[v2.0.17]]
== 2.0.17 (06.03.2024)

icon:check[] REST client: The configuration now allows adding default parameter provider for query parameters, that should be added to every request (unless overwritten).

Tests: The tests API has been extended to allow tests which do not reset the database between test cases.

[[v2.0.16]]
== 2.0.16 (28.02.2024)

icon:check[] GraphQL: In cases of long running GraphQL requests, some other GraphQL requests were queued and executed after the long running request, even if enough workers were still
available. The behaviour has been changed, so that GraphQL requests will only be queued, if all workers are currently busy.

icon:check[] Cache: The permission cache has been fixed to always return copies of the actually cached entries.

[[v2.0.15]]
== 2.0.15 (21.02.2024)

icon:check[] REST: When requesting sorted data, the permission limitations are violated. This has been fixed.

icon:check[] Core: Creating a translation for the root node of a project always failed with a "Bad Request" error, which has been fixed.

icon:check[] Elasticsearch: A full access to the data backed by ES has been given to the admin users.

icon:check[] Because of a flawed cache invalidation strategy, the project stayed on an old 'latest' branch, even if a new one has been assigned, until the caches are invalidated, or a restart is triggered. This has been fixed.

icon:check[] Cache: A mechanism of reattaching the cached entity to the persistence context has been introduced, allowing implementations of smarter cache policies.

Cache: Because of a flawed cache invalidation strategy, the project stayed on an old 'latest' branch, even if a new one has been assigned, until the caches are invalidated, or a restart is triggered. This has been fixed.

icon:check[] A regression regarding OAuth user filtering has been fixed.

Minor improvements in authentication-related utilities Java API, allowing more control over authentication URL management.

[[v2.0.14]]
== 2.0.14 (07.02.2024)

icon:check[] REST client: Improves error handling for WebSocket errors.

icon:check[] REST: The endpoints for invoking a consistency check/repair now have a new query parameter `async` which allows to perform the action as a background job instead of synchronously.
Core: Updating and publishing a node in a single request has been optimized to only create a single new version of the content.

icon:check[] Auth: Synchronization of users, groups and roles from AuthServicePlugin implementations (like the keycloak plugin) has been improved for performance and stability.

icon:check[] Elasticsearch: A possibility of DDoSing the ES with a bulk request of too many items has been eliminated.

icon:check[] GraphQL: When an inexisting language has been requested for a node, the schema info was not loaded as well. This has been fixed.

[[v2.0.13]]
== 2.0.13 (24.01.2024)

icon:check[] GraphQL: Fetching of micronode fields has been improved to allow batch loading.

[[v2.0.12]]
== 2.0.12 (10.01.2024)

icon:check[] REST: The documentation of the generic parameter `fields` has been fixed. Now `fields` works over the Language entities as well, the values are `uuid`,`name`,`languageTag`,`nativeName`.

icon:check[] GraphQL. Some of (micro)schema fields related queries rely on the target (micro)schema having at least one field, crashing in HTTP 500 otherwise. This has now been fixed. 

[[v2.0.11]]
== 2.0.11 (20.12.2023)

icon:check[] GraphQL: More test cases for sorting have been added.


icon:check[] Core: Unnecessary uniqueness checks for segment fields will now be avoided, when updating nodes.

icon:check[] GraphQL: The overall performance of GraphQL requests has been improved by caching the GraphQL schemas.

icon:check[] Core: Now it is not allowed to set a new password to an empty or invalid (e.g. spaces) string.

icon:check[] Auth: The unnecessary logging of outdated/mismatched auth token has been removed.

[[v2.0.10]]
== 2.0.10 (06.12.2023)

icon:check[] Core: A regression of creation of the named entities has been fixed.


icon:check[] Core: Improve the internal Java API of the list field creation, targeting better batch performance.


icon:check[] Core: Improve the internal Java API for granting and revoking permissions.


[[v2.0.9]]
== 2.0.9 (18.11.2023)

icon:check[] GraphQL: `referencedBy` field fetcher has been refactored for more optimal batch loading.

icon:check[] Tests: Added set of tests of uniqueness of the named entities on a database level.

icon:check[] Core: The cache internal Java API has been presented a new constructor, allowing using the weight instead of entity number for the cache size calculations, as well as some new statistics getters.

icon:check[] Core: Now caches treat NULL as a valid value, instead of a constant miss.

[[v2.0.8]]
== 2.0.8 (02.11.2023)

icon:check[] GraphQL: Some more multithreading issues with initialization of GraphQL have been fixed.


icon:check[] Core: Requests to branches failed with an internal error, if monitoring was disabled. This has been fixed.


icon:check[] Core: The new configuration option `vertxOptions.orderedBlockingHandlers` allows to change the behaviour of concurrent handling of "long running" requests
(requests that modify data or GraphQL requests). If the option is set to `true` (default value) such requests will be run in order (per http verticle) and never concurrently.
As a consequence, it may happen that e.g. GraphQL requests are queued for some time if some other requests are currently handled.
If the option is set to `false`, blocking requests will only be queued, if all threads of the worker pool are currently busy.


icon:check[] GraphQL: Performance optimizations of the Elasticsearch-based requests.


[[v2.0.7]]
== 2.0.7 (18.10.2023)

icon:check[] GraphQL: When the very first GraphQL Queries (after starting the Mesh instance) were executed in parallel, it could happen that
GraphQL execution failed with some internal errors. This has been fixed.


icon:check[] GraphQL: Parent loading has been speeded up by using a batch data loading.

icon:check[] Search: Minor logging changes in the search engine, making it less annoying.

[[v2.0.6]]
== 2.0.6 (04.10.2023)

icon:check[] Core: More NPE occurrences during the massive concurrent publishing process have been fixes.

[[v2.0.5]]
== 2.0.5 (20.09.2023)

icon:check[] Core: When running in the massive concurrent publishing process, it is possible to run into a race condition when some field containers are already processed while being referenced by the edge, 
throwing an NPE. This has now been fixed.


[[v2.0.4]]
== 2.0.4 (05.09.2023)

icon:check[] Mesh Rest Client: An error has been fixed, which prevented sorting parameters from being passed to the endpoint.


icon:check[] Clustering: Calling cluster specific REST Endpoints on non-clustered instances could cause internal server errors. The behaviour has been changed so that
a "Bad Request" error is returned containing a proper error message.


icon:check[] Java Rest Client: After logging in with the `login()` method, the login token was never refreshed, which caused it to expire after the configured token expiration time (per default 1 hour),
even if the client was used to do requests. This has been changed now, so that the login token in the client will be refreshed on every request to mesh.


icon:check[] GraphQL: Link resolving in graphql queries ignored the language tags in the links. This has been fixed.


icon:check[] GraphQL: The metadata request does not crash anymore on the empty (micro)schemas. The new related filter, `isEmpty`, has been added as well.


[[v2.0.3]]
== 2.0.3 (10.08.2023)

icon:check[] Java filter for Node reference content field has been fixed. Native filtering pagination has been improved. Some other minor stability fixed applied.

icon:check[] Plugins: Logging fixed upon false triggering of a warning of inexisting role/group connection.


icon:check[] Core: All named instances have been presented an own cache.


[[v2.0.2]]
== 2.0.2 (26.07.2023)

icon:check[] Core: Uniqueness checks for webroot url field values will now only be done, if those values actually change. This will improve performance of e.g. schema migrations, where the webroot url field values are likely to not change.


icon:check[] Core: An internal API for efficient loading of list field values has been added.


[[v2.0.1]]
== 2.0.1 (13.07.2023)

icon:check[] Clustering: Due to an incorrect check, it was possible that migration jobs could complete without actually migrating anything, when run in a clustered environment with disabled coordination mode.

[[v2.0.0]]
== 2.0.0 (29.06.2023)

icon:plus[] Core: Support of database level filtering/sorting has been added to the low level Java API.

icon:plus[] GraphQL: Support of database level filtering/sorting has been added. New `sort` parameter in added for structured sorting, forcing the usage of DB filtering. New GraphQL parameter `nativeFilter` 
is added to the selected entity lookup methods, with options `NEVER` (old filtering is forced), `ALWAYS` (DB filtering is forced), `IF_POSSIBLE` (if the requested filter is supported by a DB, DB filtering is used, otherwise filtering is fallen back to the old filter mechanism). 
Please note that not all the currently existing filters are supported by the DB.

icon:plus[] GraphQL: A simplified, native filtering friendly version of `regex` string operation, `like`, has been added, accepting wildcards `%` as a zeroable set of characters, e.g. `like: "hello%world"` requests filtering in the strings, that start with `hello`, end with `world` and have zero-to-unlimited number of any characters in between.

icon:plus[] GraphQL: Added new filters for field types: list, micronode, (s3)binary. Added a new experimental filter for referencedBy nodes.

icon:plus[] OrientDB: Basic experimental support for OrientDB native filtering/sorting is added. The GraphQL Mesh options has a new preference `nativeQueryFiltering` with options: `NEVER` (old filtering, default value), `ALWAYS` (DB filtering is forced), 
`ON_DEMAND` (GraphQL parameter `nativeFilter` is considered).

