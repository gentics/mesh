---
title: Events
---

include::content/docs/variables.adoc-include[]

In Gentics Mesh events can be used to exchange information in between clients and to inform clients about changes in the CMS.

Typical use cases for event handling:

* Exchange data in between client applications (e.g. Chat)
* Real time reload if data via `mesh.node.updated` changes.
* Client-Side cache purging if data is updated, created, deleted.
* Hooking external hardware sensors into your front-end.

== Intro

Events in Gentics Mesh can be triggered by various action. Updating a user for example will trigger the `mesh.user.updated` event. Events for specific actions can be received by registering on the event address (e.g. `mesh.user.updated` or `mesh.user.deleted`).

A websocket endpoint is used to deliver event messages to clients which register on the event addresses.


Typical workflow:

* Authenticate HTTP client
* Connect client to websocket
* Send message on websocket to register on specific event addresses
* Receive events messages
* Regularly send link:#ping[ping] messages.

== Eventbus Bridge & Websocket

The ```{apiLatest}/eventbus``` endpoint allows clients to access the eventbus. This is useful if you want to react on specific events.

The endpoint is https://github.com/sockjs[SockJS] compliant. It is also possible to access the websocket directly via: ```{apiLatest}/eventbus/websocket```.

JavaScript projects can use the link:https://www.npmjs.com/package/vertx3-eventbus-client[vertx3-eventbus-client] library to connect to the eventbus bridge.

== Message Types

=== Registering

Once the websocket has been opened you can send a text frame to Gentics Mesh that contains the information to which address you want to register to. Once registered the client will receive the published messaged on that address.

[source,json]
----
{ 
  "type": "register",
  "address": "mesh.user.updated"
}
----

=== Unregistering

If you want to unregister for specific events you can send a message of type `unregister`.

[source,json]
----
{ 
  "type": "unregister",
  "address": "mesh.user.updated"
}
----

=== Publishing

You can publish a message which will be received by all recipients which has registered on to the used address. The published message will be delivered to each of the recipients.

[source,json]
----
{ 
  "type": "publish",
  "address": "custom.event",
  "body": "someText"
}
----

=== Sending

Sending a message is different from publishing. When sending a message it will only be received by _one_ randomly selected recipient.

[source,json]
----
{ 
  "type": "publish",
  "address": "custom.event",
  "body": "someText"
}
----

[[ping]]
=== Ping

The eventbus bridge requires the client to send a regular `ping` message. The timeout for a ping message is currently set to `10` seconds. The websocket will automatically be terminated if no ping message has been received in this interval.

WARNING: Handling the ping message is essential. The eventbus bridge will not work properly without handling ping messages.

[source,json]
----
{ 
  "type": "ping"
}
----


== Addresses

The following list contains all event addresses with examples which Gentics Mesh exposes.

include::content/docs/examples/tables/MeshEvent.adoc-include[]

[[customevents]]
== Custom Events

It is also possible to register and send custom events. The address of those events must start with `custom.`.

Custom events can be used to exchange events in between connected clients.

== Examples

[[iot]]
=== IoT Example

The eventbus provides a great way to utilize data of your IoT devices in your frontend application.
The following example shows how the link:https://www.arduino.cc/[Arduino] compatible link:https://de.wikipedia.org/wiki/ESP8266[ESP8266] WIFI enabled microcontroller can utilize the Gentics Mesh eventbus.

The shown sketch utilizes the link:https://github.com/Links2004/arduinoWebSockets[arduinoWebSockets] library.

[source,c,subs="+attributes"]
----
#include <Arduino.h>
#include <ESP8266WiFi.h>
#include <ESP8266WiFiMulti.h>
#include <WebSocketsClient.h>
#include <Hash.h>

ESP8266WiFiMulti WiFiMulti;
WebSocketsClient webSocket;
#define USE_SERIAL Serial1
const char* ssid     = "Demo";
const char* password = "12345678";
const byte interruptPin = 13; // D7 on Wemos D1 Mini
volatile byte interruptCounter = 0;
int numberOfInterrupts = 0;

void setup() {
  Serial.begin(115200);
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  Serial.print("Connecting");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
 
  // Set the connection details to the Gentics Mesh Server
  webSocket.begin("1.2.3.4", 8080, "{apiLatest}/eventbus/websocket");
  webSocket.setReconnectInterval(2000);
  // Register the interrupt pin
  pinMode(interruptPin, INPUT_PULLUP);
  attachInterrupt(digitalPinToInterrupt(interruptPin), handleInterrupt, RISING);
}

// Interrupt method which will just count up
void handleInterrupt() {
  interruptCounter++;
}

void loop() {
  // Check whether the connection needs to be re-established
  webSocket.loop();
  // Check whether an interrupt has happend and send an event if needed
  if (interruptCounter > 0) {
    Serial.println("Detected interrupt");
    webSocket.sendTXT("{\"type\":\"publish\",\"address\":\"custom.event\",\"body\":\"someText\"}");
    // Reset the interrupt counter to get ready for the next event
    interruptCounter = 0;
  }
  delay(100);
  // Send a ping to prevent the server to disconnect the connection
  webSocket.sendTXT("{\"type\":\"ping\"}");
}
----

In this example the Pin 13 (D7) on the ESP8266 will be used to trigger an event.

== Limitations

NOTE: Gentics Mesh does currently not support Webhooks to register to events.
