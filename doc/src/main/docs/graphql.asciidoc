= GraphQL

Gentics Mesh is also able to process http://graphql.org/[GraphQL] queries. You can use GraphQL to directly specify what fields should be retrieved and retrieve deeply nested data sets.
Internally, Gentics Mesh will resolve your query and traverse your content graph to fetch only the data you specified.

The GraphQL API can thus be used to prepare a single request which returns all data needed to render a specific page. 

Possible usecases are:

* Loading multiple nodes using the webroot path.
* Generating a custom navigation which only includes the information you need.
* Invoking multiple search requests to find a set of specific nodes.
* Resolve links within the content of a node.
* Load users, roles, groups
* Load tags, tag families, schema and microschema information

== Live Examples

If you want to learn more about the http://graphql.org/learn/queries/[GraphQL syntax take a look at the good documentation].

=== Loading current user

include::examples/graphql/user-tiny-query[]

=== Loading basic fields of a node 

include::examples/graphql/node-field-query[]

=== Loading a node via uuid

include::examples/graphql/node-uuid-query[]

=== Loading referenced fields of a node

Nodes can be linked together in various way. One way is the regular parent-child relationship. Another way is by using node fields. The demo data contains vehicles which each is linked to a vehicle image. In order to present the vehicle we also need to retrieve the image path and other information.

include::examples/graphql/node-reference-query[]

[[search]]
=== Invoking a search query to find specific nodes

The search query is an escaped JSON object which represents the a regular https://www.elastic.co/guide/en/elasticsearch/reference/2.4/_executing_searches.html[Elasticsearch query].

include::examples/graphql/node-search-query[]

+++
<a href="https://demo.getmesh.io/api/v1/demo/graphql/browser/#query=query%20stuff(%24esQuery%3A%20String)%20%7B%0A%20%20nodes(query%3A%20%24esQuery)%20%7B%0A%20%20%20%20elements%20%7B%0A%20%20%20%20%20%20uuid%0A%20%20%20%20%20%20fields%20%7B%0A%20%20%20%20%20%20%20%20...%20on%20vehicle%20%7B%0A%20%20%20%20%20%20%20%20%20%20slug%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%20%20totalCount%0A%20%20%7D%0A%7D%0A&variables=%7B%0A%20%20%22esQuery%22%3A%20%20%22%7B%5C%22query%5C%22%3A%7B%5C%22query_string%5C%22%3A%7B%5C%22query%5C%22%3A%5C%22car%5C%22%7D%7D%7D%22%0A%7D&operationName=stuff" target="_blank">Example using variables</a>
+++

=== Using pagination

Similar to the REST API a value based pagination system is implemented. 

include::examples/graphql/node-page-query[]

=== Multilanguage support

The node will automatically be loaded in the language which matches up with the provided webroot path. A webroot path which points to an english node will yield the english content. Subsequent loading a node using the german path will yield the german content. It is important to node that Gentics Mesh tries to stick to a language as much as possible. Loading additional referenced nodes of an german node via either the children or a node field will return the german content if such content could be found. The fallback to the configured default language will be applied if no other matching content found be found. Null will be returned if this also fails.

It is possible to load a found node in a different language using the `node` field as shown in the example.

include::examples/graphql/node-multilang-query[]

== GraphiQL Browser

We have integrated the interactive https://github.com/graphql/graphiql[GraphiQL]footnote:[https://github.com/graphql/graphiql[GraphiQL] is owned and developed by Facebook Inc. Usage is subject to the https://github.com/gentics/mesh/blob/dev/verticles/graphql/src/main/resources/graphiql/LICENSE[LICENSE AGREEMENT For GraphiQL software].] browser into Gentics Mesh so you can easily play with the API.

.Try the example
[TIP]
https://demo.getmesh.io/api/v1/demo/graphql/browser/[Live Demo]

Alternatively, you can download Gentics Mesh and test the API locally.
Once authenticated you can access the interactive GraphiQL browser at ```/api/v1/:projectName/graphql/browser/``` .

NOTE: The GraphiQL browser currently does not support the release or version query parameter.

== Limitations

* At the moment, the GraphQL API can currently only be used for read-only operations. Modifying data with via mutations is currently not supported.
* GraphQL queries are restricted to a specific project. It is not possible to query data across multiple projects.
* GraphQL queries are restricted to a specific release. The scope of the release can be changed by adding the `?release` query parameter.
