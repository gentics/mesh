---
title: Administration Guide
---

include::content/docs/variables.adoc-include[]

== Software Stack

[options="header"]
|======
| Component                                                    | Type                 | Version
| https://orientdb.com/[OrientDB]                              | Graph Database       | 3.0.x
| https://github.com/Syncleus/Ferma[Ferma]                     | OGM                  | 2.4.x
| https://www.elastic.co/products/elasticsearch[Elasticsearch] | Search Engine        | 6.1.x
| http://vertx.io/[Vert.x]                                     | Core Framework       | 3.7.x
| https://hazelcast.com/[Hazelcast]                            | In-Memory Data Grid  | 3.10.x
| https://google.github.io/dagger/[Dagger 2]                   | Dependency Injection | 2.11.x
|======

TIP: You can find the components' current version numbers by querying the Gentics Mesh demo instance https://demo.getmesh.io{apiLatest}/ or your local instance http://localhost:8080{apiLatest}/.

== Run with Docker

Alternatively you can start Gentics Mesh using Docker via:

The https://hub.docker.com/r/gentics/mesh-demo/[mesh-demo] image contains Gentics Mesh together with demo content and our demo application.

[source,bash]
----
docker run -p 8080:8080 gentics/mesh-demo
----

The https://hub.docker.com/r/gentics/mesh/[mesh] image contains an empty Gentics Mesh server without any demo content.

[source,bash]
----
docker run -p 8080:8080 gentics/mesh
or
docker run \
 -v mesh-graphdb:/graphdb \
 -v mesh-uploads:/uploads \
 -p 8080:8080 \
 gentics/mesh
----

=== Volumes / Locations

[options="header"]
|======
| Name             | Description                          | Default Environment Setting
| `/uploads`       | Location for fileuploads             | `MESH_BINARY_DIR=/uploads`
| `/graphdb`       | Location for the graph database data | `MESH_GRAPH_DB_DIRECTORY=/graphdb`
| `/config`        | Location for configuration files     | -
| `/keystore`      | Location for the main keystore file which contains the cryptographic keys which are used to sign the JWT. | `MESH_AUTH_KEYSTORE_PATH=/keystore/keystore.jks`
| `/backups`       | Backup data location | `MESH_GRAPH_BACKUP_DIRECTORY=/backups`
| `/plugins`       | Plugin data and configuration location | `MESH_PLUGIN_DIR=/plugins`
| `/mesh/data`     | Remaining data files (e.g. temp dirs, caches) | -
|======

=== Docker Compose

We also provide a ready to go link:https://docs.docker.com/compose/[docker-compose] example stack for Gentics Mesh:

Single node setup with included Elasticsearch container:

* https://github.com/gentics/mesh-compose/

Multi node clustering setup:

* https://github.com/gentics/mesh-compose/tree/clustering


=== Environment Variables

Settings within the `mesh.yml` file can be override via these environment variables.

include::content/docs/examples/tables/mesh-env.adoc-include[]

== Run with JAR File

Good news: there is no dedicated installation procedure for Gentics Mesh!

All you need is to https://getmesh.io/Download[download the Gentics Mesh JAR] file and start by executing

[source,bash]
----
java -jar mesh-demo-X.X.X.jar
----

Gentics Mesh comes with OrientDB, an embedded graph database, and Elasticsearch. There are no external dependencies besides Java Runtime 8.
On first startup, Gentics Mesh will create the data folder and subfolders, set a password for the keystore file and provide the configuration files mesh.yml and mesh-ui-config.js. See <<Installation Directory>> for a detailed discussion on Gentics Mesh files & folders.

[[cli]]
=== Command Line Arguments

Various command line arguments can be used to override or supplement previously configured settings.

[source,text]
----
include::content/docs/examples/models/mesh-cli-help.txt[]
----



[[installdir]]
== Installation Directory
On first startup, Gentics Mesh will create all files and folders.

 data
    binaryFiles
    binaryImageCache
    graphdb
    tmp
 config
    keystore.jceks
    default-distributed-db-config.json
    orientdb-server-config.xml
    security.json
    hazelcast.xml
    mesh-ui-config.js
    mesh.yml
elasticsearch

Gentics Mesh ships with two configuration files:

. The main configuration file ```mesh.yml``` contains all settings for configuring the Gentics Mesh server. All settings are explained in the <<conf,Configuration & Settings>> section.
. User interface related settings can be changed in  ```mesh-ui-config.js```.

All data of your Gentics Mesh instance can be found in the respective subfolders of ```data```.

The folder ```binaryFiles``` contains all media assets of your projects including images and other files. ```binaryImageCache``` keeps resized versions of requested images. The OrientDB graph data is stored within the ```graphdb``` folder. ```tmp``` is used by Vert.x and other components e.g. for file uploads.

NOTE: This folder structure is the default. All paths can be configured in the main configuration file ```mesh.yml```.

The keystore file, by default, is named ```keystore.jceks```. On first startup, a password for the keystore file is created randomly and stored in ```mesh.yml```.

The ```elasticsearch``` folder contains the included Elasticsearch installation which will be started by default.

== System Requirements

=== Server Requirements

Gentics Mesh comes with OrientDB, an embedded graph database and Elasticsearch. There are no external dependencies besides Java Runtime 8.

==== System Configuration

The maximum open file limit on Linux has to be raised on most Linux systems since the embedded graph database and Elasticsearch server often exceed the amount of concurrent open files.

Edit _/etc/security/limits.conf_ and add these two lines:

[source,bash]
----
Mesh   soft    nofile  60000
Mesh   hard    nofile  60000
----

Edit _/etc/pam.d/su_ and uncomment or add the following line:

[source,bash]
----
session    required   pam_limits.so
----

NOTE: This change may require a logout and login.

=== Client Requirements

The Gentics Mesh user interface has been designed mobile-first and does not impose any specific requirements other than enabled JavaScript. It can be used with any "modern" browser, i.e. IE11+ and latest versions of Chrome, Firefox, and Safari.

[[conf]]
== Configuration & Settings

All settings can be found in the main ```mesh.yml``` configuration file, that contains various settings for configuring HTTP & SSL, the graph database, and file upload.
The settings for the Gentics Mesh user interface can be found in ```mesh-ui-config.js```.

Both files are located directly in the <<installdir, installation directory>>.

[source,json]
----
include::content/docs/examples/models/mesh-config.example.yml[]
----

=== General Settings

include::content/docs/snippets/config/general.inc[]

Example for custom languages file:

[source,json]
----
include::content/docs/examples/example-languages.json[]
----

=== HTTPS/SSL

To enable HTTPS you have to specify the server key and the server certificate within the configuration.

For testing purposes you may want to create a self signed certificate like this:

[source,bash]
----
openssl req -x509 -newkey rsa:2048 -keyout key.pem -out cert.pem -days 90 -nodes
----

=== Server Options

include::content/docs/snippets/config/server.inc[]

=== Cluster Options

include::content/docs/snippets/config/cluster.inc[]

=== Storage Options

By default all specified directories are relative to the installation directory.

include::content/docs/snippets/config/storage.inc[]

==== OrientDB parameters

[options="header"]
|======
| Configuration                                   | Type    | Default        | Description
| ```ridBag.embeddedToSbtreeBonsaiThreshold```    | Number  | 2147483647     | Configures the ridbag threshold for OrientDB. This setting controls how OrientDB manages the internal ridbag data structure. This setting will be ignored when run in clustered mode. See OrientDB documentation for more details.
|======


=== Search Options

include::content/docs/snippets/config/search.inc[]

=== Upload Options

include::content/docs/snippets/config/upload.inc[]

=== Security Options

include::content/docs/snippets/config/security.inc[]

=== Monitoring Options

include::content/docs/snippets/config/monitoring.inc[]

=== Image Options

include::content/docs/snippets/config/image.inc[]

=== Cache Options

include::content/docs/snippets/config/cache.inc[]

Additionally it is possible to tweak the underlying OrientDB cache settings.

=== Debug Information Options

include::content/docs/snippets/config/debuginfo.inc[]

=== Memory Settings

Memory settings can be defined using the `JAVA_TOOL_OPTIONS` environment variable.

[options="header"]
|======
| Setting                           | Description
| `-Xmx`                            | Maximum heap size of the Gentics Mesh Java process
| `-Xms`                            | Initial heap size of the Gentics Mesh Java process
| `-XX:MaxDirectMemorySize`         | Maximum direct memory limit. Direct memory is mostly used to buffer transactions of the Graph database
| `-Dstorage.diskCache.bufferSize`  | Disk buffer size in megabytes used for the Graph database
|======

==== Recommendations

The following numbers serve the purpose to roughly estimate the memory requirements for different sized projects.

[options="header"]
|======
| Node Count           | Memory Setting
| 0 to 100             | `-Xms128m  -Xmx128m  -XX:MaxDirectMemorySize=128m  -Dstorage.diskCache.bufferSize=128`
| 100 to 1_000         | `-Xms512m  -Xmx512m  -XX:MaxDirectMemorySize=256m  -Dstorage.diskCache.bufferSize=256`
| 1_000 to 10_000      | `-Xms786m  -Xmx786m  -XX:MaxDirectMemorySize=384m  -Dstorage.diskCache.bufferSize=384`
| 10_000 to 100_000    | `-Xms1250m -Xmx1250m -XX:MaxDirectMemorySize=512m  -Dstorage.diskCache.bufferSize=512`
| 100_000 to 1_000_000 | `-Xms2500m -Xmx2500m -XX:MaxDirectMemorySize=1024m -Dstorage.diskCache.bufferSize=1024`
|======

== Backup & Recovery

There are currently three components which can be included in a backup:

* *Graph Database* - The graph database contains the main content of Gentics Mesh.
    The DB can be backed up on demand via `{apiLatest}/admin/graphdb/backup` endpoint or via the OrientDB backup job using `automatic-backup.json`.
    This will automatically create a full backup. Note that both backup processes will block the application.
    The graph database backup process will write a backup file to the configured backup location (see <<Storage Location>>).

* *Binary files* - Binaries are currently stored in the filesystem and need to be backed up separately data/binaryFiles)

* *Elasticsearch Index* - Optionally you can also backup the Elasticsearch index.
    The index can also be recreated anytime using the `POST {apiLatest}/search/sync` endpoint.

The ```POST {apiLatest}/admin/graphdb/restore``` endpoint can be used to restore created backups.
The endpoint will utilize the latest backup found in the backup directory.

NOTE: Invoking the `backup`/`restore` endpoints will block all execution and request processing.

NOTE: The restore operation can't be executed on Mesh instances which have clustering enabled.

If you already run Gentics Mesh in a cluster you can start a dedicated backup instance which can run the backup process without interference of the other nodes.

Take a look at our link:https://github.com/gentics/mesh-compose/tree/clustering#online-backup[docker-compose example] for a documented setup.

== Import & Export

The `POST {apiLatest}/admin/graphdb/export` and `POST {apiLatest}/admin/graphdb/import` endpoints can be used to generate Graph Database export files which are gzipped json files. A large database can be exported and reimported again to reduce the sparse file size.

[[debuginfo]]
== Debug Information

The debug info endpoint (GET {apiLatest}/admin/debuginfo) starts a zip download containing various useful data about the system.

The documentation below lists all files that are included in the zip.

Per default everything except the consistency check is included in the zip. You can use the `?include` query parameter to include or exclude specific parts.
For example `{apiLatest}/admin/debuginfo?include=-backup,consistencyCheck` will exclude the database backup and include the consistency checks.

=== Active Config
Query name: `activeConfig`

The effective link:{{< relref "administration-guide.asciidoc" >}}#conf[configuration] that is currently used in the system. This includes overrides by command line argument and environment variables.

=== Binary Disk Usage
Query name: `binaryDiskUsage`

The total file size of all stored binaries and cached images.

=== Configurations
Query name: `config`

The following files from the `config` folder:

- `mesh.yml`
- `hazelcast.xml`
- `logback.xml`
- `default-distributed-db-config.xml`
- `orientdb-server-config.xml`

=== Consistency Check
Query name: `consistencyCheck`

Performs a link:{{< relref "administration-guide.asciidoc" >}}#_database_consistency[consistency check] and includes the result.

=== Database Backup
Query name: `backup`

WARNING: Including this will cause the database to be in read only mode for the duration of the backup.

Performs a link:{{< relref "administration-guide.asciidoc" >}}#_backup_recovery[Graph database backup] and includes the files.

=== Entities
Query name: `entities`

Includes the following entities as json:

- All jobs
- All Schemas
- All Microschemas
- All Projects
- All Branches

=== Log
Query name: `log`

Includes the latest debug log output of Gentics Mesh. Check the link:{{< relref "administration-guide.asciidoc" >}}#_debug_information_options[debug info options] for more options.

=== Migration Status
Query name: `migrationStatus`

Includes the
link:https://getmesh.io/docs/api/#project__branches__branchUuid__schemas_get[schema migration status]
and
link:https://getmesh.io/docs/api/#project__branches__branchUuid__microschemas_get[mircoschema migration status]
for every branch of every project.

=== Plugins
Query name: `plugins`

Includes the link:https://getmesh.io/docs/api/#admin_plugins_get[currently deployed plugins].

=== Status
Query name: `status`

Includes the
link:https://getmesh.io/docs/api/#_get[version],
link:https://getmesh.io/docs/api/#admin_cluster_status_get[cluster status]
and
link:https://getmesh.io/docs/api/#search_status_get[elastic search status].

=== System Information
Query name: `systemInfo`

Contains the following informations about the system:

- System load average
- JVM memory usage
- JVM arguments
- Disk space usage (of the file system where Gentics Mesh is running)

=== Thread Dump
Query name: `threadDump`

A dump of all threads including all stack traces.

== link:{{< relref "changelog.asciidoc" >}}[Changelog]

== Update handling

Updating Gentics Mesh is very simple. You stop the current instance and start it again using the new version.
A process is invoked which will check whether any automatic changes need to be applied.

=== Downgrading

Downgrading is possible but not recommended. You can however downgrade your Gentics Mesh instance
if the database revision hash of the current database matches up with the revision which is required
by the version which is being started. You can check your current database revision via the `{apiLatest}` endpoint.

[[database-revisions]]
=== Database Revisions

This list contains an overview over Gentics Mesh releases and the their database revisions.
The database revision is different if the used Graph Database version was updated or if the database
structure was altered due to an automatic change.

include::content/docs/examples/tables/mesh-db-revs.adoc-include[]

== Database Consistency

It is possible to verify the database integrity via the `GET {apiLatest}/admin/consistency/check` endpoint.

The response contains information about the found inconsistencies and whether they have a repair action.

[source,json]
----
include::content/docs/api/response{apiLatest}/admin/consistency/check/200/example.json[]
----

The `POST {apiLatest}/admin/consistency/repair` endpoint can be used to invoke a check and repair of repairable inconsistencies.

The `repaired` property will be set to true if the inconsistency could be fixed.

[source,json]
----
include::content/docs/api/response{apiLatest}/admin/consistency/repair/200/example.json[]
----

== Filesystem support

The filesystem https://en.wikipedia.org/wiki/ZFS[ZFS] (ZFS on Linux) does currently not support Direct IO on Linux.

When using ZFS it is thus required to turn off direct IO usage of OrientDB. Please use the    `-Dstorage.wal.allowDirectIO=false` setting in this case.

NOTE: The direct IO support will be included in ZFS 0.8

== License

* Gentics Mesh is published under Apache 2.0 license.
* https://github.com/graphql/graphiql[GraphiQL] is owned and developed by Facebook Inc. Usage is subject to the https://github.com/gentics/mesh/blob/d69b94d4b9bd8e3dbbba06dcdf8fac9b09593f13/verticles/graphql/src/main/resources/graphiql/LICENSE[LICENSE AGREEMENT For GraphiQL software].
