---
title: Administration Guide
---

include::content/docs/variables.adoc-include[]

== Software Stack

[options="header"]
|======
| Component                                                    | Type                 | Version
| https://orientdb.com/[OrientDB]                              | Graph Database       | 3.0.x
| https://github.com/Syncleus/Ferma[Ferma]                     | OGM                  | 2.4.x
| https://www.elastic.co/products/elasticsearch[Elasticsearch] | Search Engine        | 6.1.x
| http://vertx.io/[Vert.x]                                     | Core Framework       | 3.7.x
| https://hazelcast.com/[Hazelcast]                            | In-Memory Data Grid  | 3.10.x
| https://google.github.io/dagger/[Dagger 2]                   | Dependency Injection | 2.11.x
|======

TIP: You can find the components' current version numbers by querying the Gentics Mesh demo instance https://demo.getmesh.io{apiLatest}/ or your local instance http://localhost:8080{apiLatest}/.

== Run with Docker

Alternatively you can start Gentics Mesh using Docker via:

The https://hub.docker.com/r/gentics/mesh-demo/[mesh-demo] image contains Gentics Mesh together with demo content and our demo application.

[source,bash]
----
docker run -p 8080:8080 gentics/mesh-demo
----

The https://hub.docker.com/r/gentics/mesh/[mesh] image contains an empty Gentics Mesh server without any demo content.

[source,bash]
----
docker run -p 8080:8080 gentics/mesh
or
docker run \
 -v mesh-graphdb:/graphdb \
 -v mesh-uploads:/uploads \
 -p 8080:8080 \
 gentics/mesh
----

=== Volumes / Locations

[options="header"]
|======
| Name             | Description                          | Default Environment Setting
| `/uploads`       | Location for fileuploads             | `MESH_BINARY_DIR=/uploads`
| `/graphdb`       | Location for the graph database data | `MESH_GRAPH_DB_DIRECTORY=/graphdb`
| `/config`        | Location for configuration files     | -
| `/keystore`      | Location for the main keystore file which contains the cryptographic keys which are used to sign the JWT. | `MESH_AUTH_KEYSTORE_PATH=/keystore/keystore.jks`
| `/backups`       | Backup data location | `MESH_GRAPH_BACKUP_DIRECTORY=/backups`
| `/plugins`       | Plugin data and configuration location | `MESH_PLUGIN_DIR=/plugins`
| `/mesh/data`     | Remaining data files (e.g. temp dirs, caches) | -
|======

=== Docker Compose

We also provide a ready to go link:https://docs.docker.com/compose/[docker-compose] example stack for Gentics Mesh:

Single node setup with included Elasticsearch container:

* https://github.com/gentics/mesh-compose/

Multi node clustering setup:

* https://github.com/gentics/mesh-compose/tree/clustering

== Run with JAR File

Good news: there is no dedicated installation procedure for Gentics Mesh!

All you need is to https://getmesh.io/Download[download the Gentics Mesh JAR] file and start by executing

[source,bash]
----
java -jar mesh-demo-X.X.X.jar
----

Gentics Mesh comes with OrientDB, an embedded graph database, and Elasticsearch. There are no external dependencies besides Java Runtime 11.
On first startup, Gentics Mesh will create the data folder and subfolders, set a password for the keystore file and provide the configuration files mesh.yml and mesh-ui-config.js. See <<Installation Directory>> for a detailed discussion on Gentics Mesh files & folders.

[[cli]]
=== Command Line Arguments

Various command line arguments can be used to override or supplement previously configured settings.

[source,text]
----
include::content/docs/examples/models/mesh-cli-help.txt[]
----

[[installdir]]
== Installation Directory
On first startup, Gentics Mesh will create all files and folders.

 data
    binaryFiles                # Folder for uploads
    binaryImageCache           # Folder for resized and cached images
    graphdb                    # Main Graph Database storage which contains all contents
    tmp                        # Temporary directory
 config
    mesh.yml                   # Main Gentics Mesh configuration
    automatic-backup.json      # OrientDB Automatic Backup configuration 
    default-distributed-db-config.json # Default configuration for new Cluster Nodes
    hazelcast.xml              # Hazelcast cluster configuration
    keystore.jceks             # Gentics Mesh keystore used to generate and validate JWT's
    logback.xml                # Logging configuration file
    orientdb-server-config.xml # OrientDB Cluster Server configuration
    security.json              # OrientDB security configuration
    mesh-ui-config.js          # Configuration of the Mesh UI

Gentics Mesh ships with two configuration files:

. The main configuration file ```mesh.yml``` contains all settings for configuring the Gentics Mesh server. All settings are explained in the <<conf,Configuration & Settings>> section.
. User interface related settings can be changed in  ```mesh-ui-config.js```.

All data of your Gentics Mesh instance can be found in the respective subfolders of ```data```.

The folder ```binaryFiles``` contains all media assets of your projects including images and other files. ```binaryImageCache``` keeps resized versions of requested images. The OrientDB graph data is stored within the ```graphdb``` folder. ```tmp``` is used by Vert.x and other components e.g. for file uploads.

NOTE: This folder structure is the default. All paths can be configured in the main configuration file ```mesh.yml```.

The keystore file, by default, is named ```keystore.jceks```. On first startup, a password for the keystore file is created randomly and stored in ```mesh.yml```.

The ```elasticsearch``` folder contains the included Elasticsearch installation which will be started by default.

== System Requirements

=== Server Requirements

Gentics Mesh comes with OrientDB, an embedded graph database. There are no external dependencies besides Java Runtime 11.

Production servers must be run on Linux. Windows is not supported. You can however run Gentics Mesh on Windows via link:https://docs.docker.com/docker-for-windows/[Docker Windows].

==== GraphDB Storage Requirements

The underlying storage filesystem for the Graph Database must support DirectIO.

[options="header"]
|======
| Filesystem       | Supported
| ```Ext4```       | Yes
| ```XFS```        | Yes
| ```NFS```        | No
| ```GlusterFS```  | No
| ```Ceph```       | No
| ```ZFS```        | No
| ```Amazon EFS``` | No
| ```Amazon EBS``` | Yes
|======

Storage solutions which provide one of the supported filesystems by the means of iSCSI or Fiberchannel are supported.

Gentics Mesh will periodically check the available disk space. If less disk space is available than defined as
warn threshold, a warning will be logged. If less disk space is available than defined as read-only threshold,
the Mesh instance (in cluster mode all Mesh instances) will be set read-only, so mutating requests will all fail
with an appropriate message.

The thresholds can be configured with the configuration settings `storage.diskQuota.warnThreshold` and `storage.diskQuota.readOnlyThreshold` either as percentage of the total disk space (e.g. `10%`) or as absolute disk space (e.g. `10M`). The check interval can be configured with `storage.diskQuota.checkInterval` (in ms). Setting this to `0` will disable the check.

==== Cluster Requirements

* Each Gentics Mesh instance needs at least 1.5 GB heap memory.
* A shared filesystem needs to be provided for the upload folder. This folder needs to be shared among all cluster instances. Using NFS is a typical choice for these folders.

==== System Configuration

The maximum open file limit on Linux has to be raised on most Linux systems since the embedded graph database and Elasticsearch server often exceed the amount of concurrent open files.

The limits need to be configured specific to your execution environment.

* Docker: Limits can be specified during startup or inside the `docker-compose.yaml`.
* Systemd: Limits can be specified within the startup service file.
* K8S/Openshift: Limits need to be configured in the deployments. The commercial helm chart already includes these.
* sysvinit: The limits can be configured in the `/etc/security/limits.conf`

Edit _/etc/security/limits.conf_ and add these two lines:

[source,bash]
----
mesh   soft    nofile  60000
mesh   hard    nofile  60000
----

Edit _/etc/pam.d/su_ and uncomment or add the following line:

[source,bash]
----
session    required   pam_limits.so
----

NOTE: This change may require a logout and login.

=== Client Requirements

The Gentics Mesh user interface has been designed mobile-first and does not impose any specific requirements other than enabled JavaScript. It can be used with any "modern" browser, i.e. IE11+ and latest versions of Chrome, Firefox, and Safari.

[[env]]
== Environment Variables

Environment variables will override settings within the `mesh.yml`.

include::content/docs/examples/tables/mesh-env.adoc-include[]

[[conf]]
== Configuration & Settings

All settings can be found in the main ```mesh.yml``` configuration file, that contains various settings for configuring HTTP & SSL, the graph database, and file upload.
The settings for the Gentics Mesh user interface can be found in ```mesh-ui-config.js```.

Both files are located directly in the <<installdir, installation directory>>.

[source,json]
----
include::content/docs/examples/models/mesh-config.example.yml[]
----

=== General Settings

include::content/docs/snippets/config/general.inc[]

==== Custom Language

By default Gentics Mesh already contains all link:https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes[ISO 639-1] (two letter) language codes. By using the `languagesFilePath` setting it is possible to provide a custom languages file which can include additional language definitions.

[source,json]
----
include::content/docs/examples/example-languages.json[]
----

NOTE: Please note that the `contentLanguages` property in the `mesh-ui2-config.js` file also needs to be updated in order to show the language in the UI.

TIP: The link:https://github.com/gentics/mesh-compose/tree/extra-language[mesh-compose] project contains a full example configuration which shows how to add a custom language.


=== HTTPS/SSL

See link:{{< relref "references.asciidoc" >}}#_https[HTTPs configuration].

=== Server Options

include::content/docs/generated/tables/HttpServerConfig.adoc-include[]

=== Cluster Options

include::content/docs/generated/tables/ClusterOptions.adoc-include[]

=== Storage Options

By default all specified directories are relative to the installation directory.

include::content/docs/generated/tables/GraphStorageOptions.adoc-include[]

==== OrientDB parameters

[options="header"]
|======
| Configuration                                   | Type    | Default        | Description
| ```ridBag.embeddedToSbtreeBonsaiThreshold```    | Number  | 2147483647     | Configures the ridbag threshold for OrientDB. This setting controls how OrientDB manages the internal ridbag data structure. This setting will be ignored when run in clustered mode. See OrientDB documentation for more details.
|======

=== Search Options

include::content/docs/generated/tables/ElasticSearchOptions.adoc-include[]

=== Upload Options

include::content/docs/generated/tables/MeshUploadOptions.adoc-include[]

=== Security Options

include::content/docs/generated/tables/AuthenticationOptions.adoc-include[]

==== Public Keys

A file with additional public keys can be specified via the `publicKeysPath` property. The public keys from this file will be used to validate JWT's which were not issued by Gentics Mesh. This is especially useful when using Gentics Mesh with external OIDC / OAuth2 providers.

The keys have to be specified in the link:https://tools.ietf.org/html/rfc7517[JWK format].

[source,json]
----
include::content/docs/examples/example-public-keys.json[]
----

=== Monitoring Options

include::content/docs/generated/tables/MonitoringConfig.adoc-include[]

=== Image Options

include::content/docs/generated/tables/ImageManipulatorOptions.adoc-include[]

=== Cache Options

include::content/docs/generated/tables/CacheConfig.adoc-include[]

Additionally it is possible to tweak the underlying OrientDB cache settings.

=== Debug Information Options

include::content/docs/generated/tables/DebugInfoOptions.adoc-include[]

=== GraphQL Options

include::content/docs/generated/tables/GraphQLOptions.adoc-include[]

=== Memory Settings

Memory settings can be defined using the `JAVA_TOOL_OPTIONS` environment variable.

[options="header"]
|======
| Setting                           | Description
| `-Xmx`                            | Maximum heap size of the Gentics Mesh Java process
| `-Xms`                            | Initial heap size of the Gentics Mesh Java process
| `-Xss`                            | Stack size. A larger stack size may be required when deleting deep datasets. The default value is 1MB.
| `-XX:MaxDirectMemorySize`         | Maximum direct memory limit. Direct memory is mostly used for IO buffers.
| `-Dstorage.diskCache.bufferSize`  | Disk buffer size in megabytes used for the graph database. The disk cache will make use of direct memory that is independent of the above setting.
|======

The total amount of required memory is the roughly sum of `heap memory` + `direct memory` + `disk cache` + (`stack size` * `thread count`) + `256 MB (OrientDB + JVM base memory)`.

==== Recommendations (Single Node)

The following numbers serve the purpose to roughly estimate the memory requirements for different sized projects in a **non-clustered** setup.

[options="header"]
|======
| Node Count           | Memory Setting
| 0 to 100             | `-Xms128m -Xmx128m -XX:MaxDirectMemorySize=128m  -Dstorage.diskCache.bufferSize=128`
| 100 to 1_000         | `-Xms512m -Xmx512m -XX:MaxDirectMemorySize=128m  -Dstorage.diskCache.bufferSize=256`
| 1_000 to 10_000      | `-Xms786m -Xmx786m -XX:MaxDirectMemorySize=128m  -Dstorage.diskCache.bufferSize=384`
| 10_000 to 100_000    | `-Xms1250m -Xmx1250m -XX:MaxDirectMemorySize=128m -Dstorage.diskCache.bufferSize=512`
| 100_000 to 1_000_000 | `-Xms2500m -Xmx2500m -XX:MaxDirectMemorySize=128m -Dstorage.diskCache.bufferSize=1024`
|======

==== Recommendations (Clustered Node)

The following numbers serve the purpose to roughly estimate the memory requirements for different sized projects in a *clustered* setup.

[options="header"]
|======
| Node Count           | Memory Setting
| 0 to 100             | `-Xms1124m -Xmx1124m -Xss1m -XX:MaxDirectMemorySize=628m  -Dstorage.diskCache.bufferSize=628`
| 100 to 1_000         | `-Xms1512m -Xmx1512m -Xss2m -XX:MaxDirectMemorySize=856m  -Dstorage.diskCache.bufferSize=856`
| 1_000 to 10_000      | `-Xms1786m -Xmx1786m -Xss2m -XX:MaxDirectMemorySize=984m  -Dstorage.diskCache.bufferSize=984`
| 10_000 to 100_000    | `-Xms2250m -Xmx2250m -Xss2m -XX:MaxDirectMemorySize=1024m  -Dstorage.diskCache.bufferSize=1024`
| 100_000 to 1_000_000 | `-Xms3500m -Xmx3500m -Xss4m -XX:MaxDirectMemorySize=2048m -Dstorage.diskCache.bufferSize=2048`
|======

== Admin Access

By default an `admin` user will be created during initial startup. The password of this user will be printed in the log. 
It is mandatory to update the admin password during the first login.

NOTE: For demo installations the password is `admin`.

Additional admin users can be created by setting the `admin` flag the users.

NOTE: The admin access can be restored via the use of the `resetAdminPassword` link:#cli[mesh server argument].

== Backup & Recovery

There are currently fours components which can be included in a backup:

* *Graph Database* - The graph database contains the main content of Gentics Mesh.
    The DB can be backed up on demand via `{apiLatest}/admin/graphdb/backup` endpoint or via the OrientDB backup job using `automatic-backup.json`.
    This will automatically create a full backup. Note that both backup processes will block the application.
    The graph database backup process will write a backup file to the configured backup location (see <<Storage Location>>).

* *Binary files* - Binaries are currently stored in the filesystem and need to be backed up separately data/binaryFiles)

* *Elasticsearch Index* - Optionally you can also backup the Elasticsearch index.
    The index can also be re-created anytime using the `POST {apiLatest}/search/sync` endpoint.

* *Configuration* - The Gentics Mesh configuration files should be part of a backup. Especially the `keystore.jks` file is important since it contains the cryptographic keys which are needed to authenticate issued tokens which includes also the API key.
                    The `mesh.yaml` file contains the autogenerated password for the keystore file. The keystore file and the password to open it are required by Gentics Mesh to authenticate tokens.

The ```POST {apiLatest}/admin/graphdb/restore``` endpoint can be used to restore created backups.
The endpoint will utilize the latest backup found in the backup directory.

NOTE: Invoking the `backup`/`restore` endpoints will block all execution and request processing. Reverse proxies may return a timeout error when the request takes too long.

NOTE: The backup endpoint will only create a backup of the graph database. The other components need to be handled separately.

NOTE: The restore operation can't be executed on Mesh instances which have clustering enabled.

If you already run Gentics Mesh in a cluster you can start a dedicated backup instance which can run the backup process without interference of the other nodes.

Take a look at our link:https://github.com/gentics/mesh-compose/tree/clustering#online-backup[docker-compose example] for a documented setup.

== Import & Export

The `POST {apiLatest}/admin/graphdb/export` and `POST {apiLatest}/admin/graphdb/import` endpoints can be used to generate Graph Database export files which are gzipped json files. A large database can be exported and reimported again to reduce the sparse file size.

[[debuginfo]]
== Debug Information

The debug info endpoint (GET {apiLatest}/admin/debuginfo) starts a zip download containing various useful data about the system.

The documentation below lists all files that are included in the zip.

Per default everything except the consistency check is included in the zip. You can use the `?include` query parameter to include or exclude specific parts.
For example `{apiLatest}/admin/debuginfo?include=-backup,consistencyCheck` will exclude the database backup and include the consistency checks.

=== Active Config
Query name: `activeConfig`

The effective link:{{< relref "administration-guide.asciidoc" >}}#conf[configuration] that is currently used in the system. This includes overrides by command line argument and environment variables.

=== Binary Disk Usage
Query name: `binaryDiskUsage`

The total file size of all stored binaries and cached images.

=== Configurations
Query name: `config`

The following files from the `config` folder:

- `mesh.yml`
- `hazelcast.xml`
- `logback.xml`
- `default-distributed-db-config.xml`
- `orientdb-server-config.xml`

=== Consistency Check
Query name: `consistencyCheck`

Performs a link:{{< relref "administration-guide.asciidoc" >}}#_database_consistency[consistency check] and includes the result.

=== Database Backup
Query name: `backup`

WARNING: Including this will cause the database to be in read only mode for the duration of the backup.

Performs a link:{{< relref "administration-guide.asciidoc" >}}#_backup_recovery[Graph database backup] and includes the files.

=== Entities
Query name: `entities`

Includes the following entities as json:

- All jobs
- All Schemas
- All Microschemas
- All Projects
- All Branches

=== Log
Query name: `log`

Includes the latest debug log output of Gentics Mesh. Check the link:{{< relref "administration-guide.asciidoc" >}}#_debug_information_options[debug info options] for more options.

=== Migration Status
Query name: `migrationStatus`

Includes the
link:https://getmesh.io/docs/api/#project__branches__branchUuid__schemas_get[schema migration status]
and
link:https://getmesh.io/docs/api/#project__branches__branchUuid__microschemas_get[mircoschema migration status]
for every branch of every project.

=== Plugins
Query name: `plugins`

Includes the link:https://getmesh.io/docs/api/#admin_plugins_get[currently deployed plugins].

=== Status
Query name: `status`

Includes the
link:https://getmesh.io/docs/api/#_get[version],
link:https://getmesh.io/docs/api/#admin_cluster_status_get[cluster status]
and
link:https://getmesh.io/docs/api/#search_status_get[elastic search status].

=== System Information
Query name: `systemInfo`

Contains the following informations about the system:

- System load average
- JVM memory usage
- JVM arguments
- Disk space usage (of the file system where Gentics Mesh is running)

=== Thread Dump
Query name: `threadDump`

A dump of all threads including all stack traces.

[[readonly]]
== Read Only Mode

Gentics Mesh can be put into read only mode. In this mode, all requests that would change data (create, update, delete) are not allowed and return a `405´ status code instead.

This is useful in cluster situations when having instances as replicas or when performing rolling updates.

=== Activating Read Only Mode

Read only mode can be activated in one of the following ways:

* Setting the entry `startInReadOnly` to `true` in the link:#conf[configuration file] before starting will start Gentics Mesh in read only mode.
* Setting the environment variable `MESH_START_IN_READ_ONLY` to `true` before starting will start Gentics Mesh in read only mode.
* Using the link:https://getmesh.io/docs/api/#admin_localConfig_post[REST API]. Changing read only mode in this way will take immediate effect.

== link:{{< relref "changelog.asciidoc" >}}[Changelog]

== Update handling

Updating Gentics Mesh is very simple. You stop the current instance and start it again using the new version.
A process is invoked which will check whether any automatic changes need to be applied.

=== Downgrading

Downgrading is possible but not recommended. You can however downgrade your Gentics Mesh instance
if the database revision hash of the current database matches up with the revision which is required
by the version which is being started. You can check your current database revision via the `{apiLatest}` endpoint.

[[database-revisions]]
=== Database Revisions

This list contains an overview over Gentics Mesh releases and the their database revisions.
The database revision is different if the used Graph Database version was updated or if the database
structure was altered due to an automatic change.

include::content/docs/examples/tables/mesh-db-revs.adoc-include[]

== Database Consistency

It is possible to verify the database integrity via the `GET {apiLatest}/admin/consistency/check` endpoint.

The response contains information about the found inconsistencies and whether they have a repair action.

[source,json]
----
include::content/docs/api/response{apiLatest}/admin/consistency/check/200/example.json[]
----

The `POST {apiLatest}/admin/consistency/repair` endpoint can be used to invoke a check and repair of repairable inconsistencies.

The `repaired` property will be set to true if the inconsistency could be fixed.

[source,json]
----
include::content/docs/api/response{apiLatest}/admin/consistency/repair/200/example.json[]
----

== Filesystem support

The filesystem https://en.wikipedia.org/wiki/ZFS[ZFS] (ZFS on Linux) does currently not support Direct IO on Linux.

When using ZFS it is thus required to turn off direct IO usage of OrientDB. Please use the    `-Dstorage.wal.allowDirectIO=false` setting in this case.

NOTE: The direct IO support will be included in ZFS 0.8

== License

* Gentics Mesh is published under Apache 2.0 license.
* https://github.com/graphql/graphiql[GraphiQL] is owned and developed by Facebook Inc. Usage is subject to the https://github.com/gentics/mesh/blob/d69b94d4b9bd8e3dbbba06dcdf8fac9b09593f13/verticles/graphql/src/main/resources/graphiql/LICENSE[LICENSE AGREEMENT For GraphiQL software].
