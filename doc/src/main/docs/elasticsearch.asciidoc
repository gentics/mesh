---
title: Elasticsearch
---

include::content/docs/variables.adoc-include[]

Elasticsearch is used in order to provide the main search functionality within Gentics Mesh.

When enabled it is possible to search for:

* link:#users[Users]
* link:#groups[Groups]
* link:#roles[Roles]
* link:#nodes[Nodes]
* link:#projects[Projects]
* link:#schemas[Schemas]
* link:#microschemas[Microschemas]
* link:#tags[Tags]
* link:#tagfamilies[TagFamilies]

Search queries can be executed via the dedicated search link:#endpoints[REST endpoints] or link:#_graphql[GraphQL].

== TL;DR

You can use link:https://www.elastic.co/guide/en/elasticsearch/reference/6.1/_introducing_the_query_language.html[Elasticsearch queries] to search for data.
Please note that the format of the documents which can be searched differs from the format which Gentics Mesh returns by the REST API. 
This difference will affect your queries.

== Integration details

=== Data format

NOTE:  The JSON format of stored documents within the Elasticsearch differ from the JSON format that is returned via regular Gentics Mesh endpoints.
Thus it is important to know the Elasticsearch document format when building an Elasticsearch query.

=== Permission handling

Internally Gentics Mesh will check which roles of the user match up with the needed roles of the documents and thus only return elements which are visible by the user.
This is done by nesting the input query inside of an outer boolean query which includes the needed filter terms.

=== Limitations

NOTE: It is not possible to search for specific individual versions. Instead only published and draft versions per project branch are stored in the search index.

NOTE: The stored documents within the Elasticsearch indices do not contain all properties which are otherwise available via REST. 
Only directly accessible values which have minimal dependencies to other elements are stored in order to keep the update effort manageable.

NOTE: Unlike Mesh, Elasticsearch does not allow an unbounded page size in the search result. The default value for the `perPage` parameter is `10`.

== Configuration

The Elasticsearch connection can be configured within the `mesh.yml` configuration file.

[source,yaml]
----
search:
  url: "http://localhost:9200"
  timeout: 8000
----

include::content/docs/snippets/config/search.inc[]

The `search.url` parameter must point to the Elasticsearch installation that you want to use.

TIP: You can also use link:{{< relref "administration-guide.asciidoc" >}}#_environment_variables[environment variables] to configure Gentics Mesh and change these settings.

=== Disabling search

It is also possible to completely turn off the search support by setting the `search.url` property to null.

TIP: You can add Elasticsearch support at any point and invoke ```POST {apiLatest}/search/sync``` via the REST API to populate the search indices.

== Compatibility

We currently run and test against Elasticsearch version 6.8.1 and 7.4.0. Other versions have not yet been tested.

The `search.complianceMode` setting or `MESH_ELASTICSEARCH_COMPLIANCE_MODE` environment variable can be used to control the compliance levels that influence Elasticsearch compatibility.

Levels:

* `ES_7` - Support Elasticsearch 7.x
* `PRE_ES_7` - Support Elasticsearch 6.x (*Default*)

== Security

Gentics Mesh supports basic authentication and TLS in-transit encrypted connections for Elasticsearch communication.

== Encrypting communications

The Elasticsearch server can be configured to use TLS/SSL encryption. Details on this topic can be found in the link:https://www.elastic.co/guide/en/elasticsearch/reference/current/configuring-tls.html[Elasticsearch documentation].

You can specify the certificate chain (server certificate and common authority certificate) of the Elasticsearch server in the Gentics Mesh configuration in order to only trust this connection.

.example settings
```
search:
  url: "https://127.0.0.1:9200"
  username: "elastic"
  password: "iucee7dohjaedemiShoshie9eiz4af0Oiceish6a"
  certPath: "certs/elastic-certificates.crt.pem"
  caPath: "certs/elastic-stack-ca.crt.pem"
  hostnameVerification: true
```

NOTE: The `certPath` and `caPath` setting only accept certificate files in `PEM` format.

NOTE: Elasticsearch servers which already use a trusted certificate don't need to specify this cert in the configuration. It can however be configured to only trust the given cert chain.

The settings can be also configured via environment variables:

* `MESH_ELASTICSEARCH_CERT_PATH` - Override the cert path
* `MESH_ELASTICSEARCH_CA_PATH` - Override the ca path
* `MESH_ELASTICSEARCH_HOSTNAME_VERIFICATION` - Override the hostname verification

== Basic Authentication

Connections to Elasticsearch can be authenticated using a user. Details on how to configure this in Elasticsearch can be found in the link:https://www.elastic.co/guide/en/elastic-stack-overview/current/built-in-users.html[Elasticsearch documentation].

When `xpack.security.enabled` has been enabled in Elasticsearch you can use the `elasticsearch-setup-passwords`

The authentication details can be configured using the `search.username` and `search.password` settings in the `mesh.yml`.

The `username` and `password` will only be used when specified. By default no user will be used.

The settings can be also configured via environment variables:

* `MESH_ELASTICSEARCH_USERNAME` - Override the configured username
* `MESH_ELASTICSEARCH_PASSWORD` - Override the configured password


[[endpoints]]
== REST endpoints

Search requests are handled by the ```{apiLatest}/search``` or ```{apiLatest}/:projectName/search``` endpoints.

If you want the search endpoints to wait until Elasticsearch has processed all pending changes to the index, you can set the query parameter `?wait=true`.
The default value can be configured in the link:{{< relref "administration-guide.asciidoc" >}}#_search_options[search options].

NOTE: If no query parameter and no configuration was provided, the wait parameter defaults to `true` to not break any existing implementations. In the future this will change to `false`.

== Examples / Queries

[[users]]
=== Users

Endpoint: ```{apiLatest}/search/users```

[source,json]
----
{
  "query": {
      "simple_query_string" : {
          "query": "myusername*",
          "fields": ["username.raw"],
          "default_operator": "and"
      }
  }
}
----

[[groups]]
=== Groups

Endpoint: ```{apiLatest}/search/groups```

[source,json]
----
{
  "query": {
      "simple_query_string" : {
          "query": "testgroup*",
          "fields": ["name.raw^5"],
          "default_operator": "and"
      }
  }
}
----

[[roles]]
=== Roles

Endpoint: ```{apiLatest}/search/roles```

[[nodes]]
=== Nodes

Endpoint: ```{apiLatest}/search/nodes```

==== Search nodes by schema name

Listed below is an example search query which can be posted to ```{apiLatest}/search/nodes``` in order to find all nodes across all projects which were created using the content schema.
The found nodes will be sorted ascending by creator.

[source,json]
----
{
  "sort" : {
     "created" : { "order" : "asc" }
  },
  "query":{
    "bool" : {
      "must" : {
        "term" : { "schema.name" : "content" }
       }
    }
  }
}
----

==== Search nodes by micronode

*Search nodes by micronode field values*

When searching by a micronode field value, the parameters after `fields.<fieldname>.` need to be `field-<name of microschema>.<field of microschema>`. The full key would thus be: `"fields.<field name of schema>.fields-<microschema name>.<field name of microschema>"`

Example: Find all nodes which have a micronode list field (vcardlist) that contain at least one micronode which contains the two string fields (firstName, lastName) of the schema 'vcard_details' with the values ("Joe", "Doe"):

[source,json]
----
{
  "query": {
    "nested": {
      "path": "fields.vcardlist",
      "query": {
        "bool": {
          "must": [
            {
              "match": {
                "fields.vcardlist.fields-vcard_details.firstName": "Joe"
              }
            },
            {
              "match": {
                "fields.vcardlist.fields-vcard_details.lastName": "Doe"
              }
            }
          ]
        }
      }
    }
  }
}
----

==== Search tagged nodes

*Search nodes which are tagged 'Solar' and 'Blue'*

The tags field is a nested field and thus a nested query must be used to match the two tags. Please note that you need to use `match_phrase` because you want to match the whole tag name. Using `match` would cause Elasticsearch to match any of trigram found within the tag name value. 

[source,json]
----
{
  "query": {
    "nested": {
      "path": "tags",
      "query": {
        "bool": {
          "must": [
            {
              "match_phrase": {
                "tags.name": "Solar"
              }
            },
            {
              "match_phrase": {
                "tags.name": "Blue"
              }
            }
          ]
        }
      }
    }
  }
}
----

*Search nodes which have been tagged with 'Diesel' for tagFamily 'Fuels':*

[source,json]
----
{
    "query": {
        "nested": {
            "ignore_unmapped": "true",
            "path": "tagFamilies.Fuels.tags",
            "query": {
                "match": {
                    "tagFamilies.Fuels.tags.name": "Diesel"
                }
            }
        }
    }
}
----


NOTE: The `"ignore_unmapped": "true"` will suppress errors which may be returned due to missing paths. This is useful when invoking `/rawSearch` requests which will directly return the Elasticsearch response. This response would otherwise be cluttered with a lot of errors due to missing path. This can be omitted for these kinds of searches.


==== Search nodes by geolocation of images

*Search images which were taken in specific areas*

GPS information from images will automatically be extracted and added to the search index. It is possible to run a link:https://www.elastic.co/guide/en/elasticsearch/reference/current/geo-queries.html[geo search] to locate images within a specific area.

[source,json]
----
{
    "query": {
        "bool" : {
            "must" : {
                "match_all" : {}
            },
            "filter" : {
                "geo_bounding_box" : {
                    "fields.binary.metadata.location" : {
                        "top_left" : {
                            "lat" : 50.0,
                            "lon" : 10.0
                        },
                        "bottom_right" : {
                            "lat" : -40.0,
                            "lon" : 19.0
                        }
                    }
                }
            }
        }
    }
}
----



[[projects]]
=== Projects

Endpoint: ```{apiLatest}/search/projects```

[[tags]]
=== Tags

Endpoint: ```{apiLatest}/search/tags```

[source,json]
----
{
  "query": {
    "nested": {
      "path": "tags",
      "query": {
        "bool": {
          "must": {
            "match_phrase": {
              "tags.name": "Twinjet"
            }
          }
        }
      }
    }
  }
}
----

[[tagfamilies]]
=== Tag Families

Endpoint: ```{apiLatest}/search/tagFamilies```


[source,json]
----
{
  "query": {
    "nested": {
      "path": "tagFamilies.colors.tags",
      "query": {
        "match": {
          "tagFamilies.colors.tags.name": "red"
        }
      }
    }
  }
}
----

[[schemas]]
=== Schemas

Endpoint: ```{apiLatest}/search/schemas```

[[microschemas]]
=== Microschemas

Endpoint: ```{apiLatest}/search/microschemas```

=== Paging

The paging query parameters are `perPage` and `page` . It is important to note that ```page``` is 1-based and ```perPage``` can be set to ```0``` in order to just retrieve a count of elements.

=== Raw search

Additionally it is also possible to use the ```{apiLatest}/rawSearch``` or ```{apiLatest}/:projectName/rawSearch``` endpoints.

These endpoints will accept the same query but return a Elasticsearch multi search response instead of the typical Gentics Mesh list response.
This is useful if you want to use for example the Elasticsearch highlighing and aggregation features.
The endpoint will automatically select the needed indices and modify the query in order to add needed permission checks.

==== Index Synchronization

The ```POST {apiLatest}/search/sync``` endpoint can be used to invoke a manual sync of the search index.

NOTE: The index sync operation will automatically be invoked when Mesh is being started and a unclean shutdown has been detected.

You can also recreate all indices if needed via the ```POST {apiLatest}/search/clear``` endpoint.

NOTE: This operation will remove all indices which have been created by Mesh and rebuild them one at a time.

NOTE: The index sync is a memory intensive operation. The `search.syncBatchSize` setting can be used to control how much memory will be utilized during the synchronization. 250 MB of the heap memory is sufficient to index `250_000` elements using the differential sync mechanism.

== Binary Search

Document uploads to Gentics Mesh will automatically be parsed and the containing text will be extracted. This information will also be added to the search index and thus it is possible to search for text within uploaded documents.

You can disable this feature in the global options or per binary field. See the link:{{< relref "features.asciidoc" >}}#_metadata_handling[file upload documentation] for more information.

Currently uploads which have one of these mimetypes will be processed:

* application/pdf
* application/msword
* text/rtf
* application/vnd.ms-powerpoint
* application/vnd.oasis.opendocument.text
* text/plain
* application/rtf

Example binary field within document:

[source,json]
----
…
  "binaryField" : {
    "filename" : "mydoc.pdf",
    "sha512sum" : "16d3aeae9869d2915dda30866c2d7b77f50dc668daa3a49d2bc6eb6349cf6e895099349b7f8240174a788db967c87947b6a2fd41a353eec99a20358dfd4c9211",
    "mimeType" : "application/pdf",
    "filesize" : 200,
    "file" : {
      "content" : "Lorem ipsum dolor sit amet"
    }
  }
…
----

== GraphQL

It is possible to nest Elasticsearch queries within the GraphQL query in order to filter elements.

See link:{{< relref "graphql.asciidoc" >}}#search[GraphQL examples].

== Document format

The following section contains document examples which are useful when creating queries.
Gentics Mesh transforms elements into these documents which then can be stored within Elasticsearch.

=== Users

[source,json]
----
include::content/docs/examples/search/user.search.json[]
----

=== Groups

[source,json]
----
include::content/docs/examples/search/group.search.json[]
----

=== Roles

[source,json]
----
include::content/docs/examples/search/role.search.json[]
----

=== Nodes

[source,json]
----
include::content/docs/examples/search/node.search.json[]
----

=== Projects

[source,json]
----
include::content/docs/examples/search/project.search.json[]
----

=== Tags

[source,json]
----
include::content/docs/examples/search/tag.search.json[]
----

=== Tag Families

[source,json]
----
include::content/docs/examples/search/tagFamily.search.json[]
----

=== Microschemas

[source,json]
----
include::content/docs/examples/search/microschema.search.json[]
----

=== Schemas

[source,json]
----
include::content/docs/examples/search/schema.search.json[]
----

== Custom mappings / index settings

The index settings for nodes can be configured within the schema json. Additionally it is also possible to add extra mappings to fields.
This may be desired when if a field needs to be analyzed in a special way or a `keyword` field must be added.

An example for such Schema can be seen below. 
This schema contains additional tokenizer and analyzer which can be used to setup an index that is ready to be used for a full-text search which supports autocompletion and auto suggestion.

[source,json]
----
{
    "container": false,
    "name": "CustomSchema",
    "elasticsearch": {
        "analysis": {
            "filter": {
                "my_stop": {
                    "type": "stop",
                    "stopwords": "_english_"
                },
                "autocomplete_filter": {
                    "type": "edge_ngram",
                    "min_gram": 1,
                    "max_gram": 20
                }
            },
            "tokenizer": {
                "basicsearch": {
                    "type": "edge_ngram",
                    "min_gram": 1,
                    "max_gram": 10,
                    "token_chars": [
                        "letter"
                    ]
                }
            },
            "analyzer": {
                "autocomplete": {
                    "type": "custom",
                    "tokenizer": "standard",
                    "char_filter": [
                        "html_strip"
                    ],
                    "filter": [
                        "lowercase",
                        "my_stop",
                        "autocomplete_filter"
                    ]
                },
                "basicsearch": {
                    "tokenizer": "basicsearch",
                    "char_filter": [
                        "html_strip"
                    ],
                    "filter": [
                        "my_stop",
                        "lowercase"
                    ]
                },
                "basicsearch_search": {
                    "char_filter": [
                        "html_strip"
                    ],
                    "tokenizer": "lowercase"
                }
            }
        }
    },
    "fields": [
        {
            "name": "content",
            "required": false,
            "elasticsearch": {
                "basicsearch": {
                    "type": "text",
                    "analyzer": "basicsearch",
                    "search_analyzer": "basicsearch_search"
                },
                "suggest": {
                    "type": "text",
                    "analyzer": "simple"
                },
                "auto": {
                    "type": "text",
                    "analyzer": "autocomplete"
                }
            },
            "type": "string"
        }
    ]
}
----

Custom mappings can currently only be specified for the following types:

* string fields
* html fields
* string list fields
* html list fields
* binary fields

NOTE: Index settings for other elements (e.g: Users, Roles etc) can currently not be configured.

=== Mapping Modes

Gentics Mesh currently supports two way of managing mappings for your content fields.

The mode can be controlled via the `search.mappingMode` option or the `MESH_ELASTICSEARCH_MAPPING_MODE` environment variable.

The mapping mode setting influences how Elasticsearch mappings for fields will be generated.

**DYNAMIC** (_default_)

In this mode Gentics Mesh will automatically create default mappings for any content field.
The custom mapping which can be added via the `elasticsearch` parameter will be used to supplement the default mapping.

**STRICT**

In the strict mode Gentics Mesh will not generate default mappings. Only field mappings which have been specified in the `elasticsearch` property will be added to the index mapping.

NOTE: Please note that your custom mapping will directly replace the field mapping in this mode. If you switch modes you need to adapt your `elasticsearch` property value. The setting will no longer be added as a nested element.

This mode is useful if you want to have finer control of what contents should be added to Elasticsearch.

Fields which have no mapping will by-default also not added to the source document.

Example:
[source,json]
----
{
	"displayField": "name",
	"container": true,
	"name": "category",
	"fields": [
		{
			"name": "name",
			"label": "Name",
			"required": true,
			"type": "string"
		},
		{
			"name": "description",
			"label": "Description",
			"required": false,
			"type": "string",
			"elasticsearch": {
				"type": "keyword",
				"index": false,
				"fields": {
					"search": {
						"type": "text",
						"analyzer": "trigrams"
					}
				}
			}
		}
	]
}
----

TIP: You can use the `POST {apiLatest}/utilities/validateSchema` endpoint to validate your schema and check what index mapping is actually being generated.

TIP: If you just want to add your field to the source document you can create a mapping with `"index": false`.

[[language-override]]
=== Mappings / Settings per Language

It is also possible to define different settings / mappings for different languages. This is useful to use language specific stemmers and link:https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-stop-tokenfilter.html[stop word lists].To do so, add the `_meshLanguageOverride` property to the `elasticsearch` object.
In this object you can override settings / mappings for each language. You can also provide the same setting / mapping for multiple language by using a
comma separated list of languages as the key.

NOTE: For each overridden language, Gentics Mesh will create additional indices in Elasticsearch. This might affect the resources used by Elasticsearch.

Node contents of that language will be saved in that index.
When a node content is created with a language that is not overridden, the node content will be saved in the default index. The settings / mappings of the
default index can be configured like shown in the example above.

Here is an example using this feature:
[source,json]
----
{
  "name": "page",
  "elasticsearch": {
    "_meshLanguageOverride": {
      "de": {
        "analysis": {
          "analyzer": {
            "my_stop_analyzer": {
              "type": "stop",
              "stopwords": "_german_"
            }
          }
        }
      },
      "ja,zh,ko": {
        "analysis": {
          "analyzer": {
            "my_stop_analyzer": {
              "type": "stop",
              "stopwords": ["_english_", "_cjk_"]
            }
          }
        }
      }
    },
    "analysis": {
      "analyzer": {
        "my_stop_analyzer": {
          "type": "stop",
          "stopwords": "_english_"
        }
      }
    }
  },
  "fields": [
    {
      "name": "title",
      "type": "string",
      "elasticsearch": {
        "basicsearch": {
          "type": "text",
          "analyzer": "my_stop_analyzer"
        }
      }
    },
    {
      "name": "content",
      "type": "string",
      "elasticsearch": {
        "_meshLanguageOverride": {
          "fr": {
            "basicsearch": {
              "type": "text",
              "analyzer": "standard"
            }
          }
        },
        "basicsearch": {
          "type": "text",
          "analyzer": "my_stop_analyzer"
        }
      }
    }
  ]
}
----

== Binary Fields

You can add custom mappings to the `mimeType` and `file.content` field. The `elasticsearch` property needs to contain a custom mapping for each type.

Example:
[source,json]
----
{
  "displayField": "name",
  "segmentField": "binary",
  "container": false,
  "description": "Image schema",
  "name": "image",
  "fields": [
    {
      "name": "name",
      "label": "Name",
      "required": false,
      "type": "string"
    },
    {
      "name": "binary",
      "label": "Image",
      "required": false,
      "type": "binary",
      "elasticsearch": {
        "mimeType": {
          "raw": {
            "type": "keyword",
            "index": true
          }
        },
        "file.content": {
          "raw": {
            "type": "keyword",
            "index": true
          }
        }
      }
    }
  ]
}
----
