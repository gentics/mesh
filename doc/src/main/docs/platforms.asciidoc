---
title: Platforms
---

:icons: font
:source-highlighter: prettify
:toc:


== JavaScript

* link:https://github.com/gentics/mesh-angular-example[Mesh Angular Example]
* link:https://github.com/gentics/mesh-express-example[Mesh Express Example]
* link:https://github.com/gentics/mesh-js-api[Mesh Javascript API] - An API client for Gentics Mesh written in TypeScript.

== PHP

* link:https://github.com/gentics/mesh-silex-example[Mesh PHP Example] - This example shows how to use Gentics Mesh in combination with the Silex PHP routing framework.

== Go

* link:https://github.com/gentics/mesh-go-example[Mesh Go Example]

== Java

=== Vert.x Frontend Example

link:https://github.com/gentics/mesh-vertx-example[Mesh Vert.x Example]

=== Clients

You can add the following maven dependency and repository to your project to get the Gentics Mesh client dependencies.

[source,xml]
----
…
	<dependency>
		<artifactId>mesh-rest-client</artifactId>
		<groupId>com.gentics.mesh</groupId>
		<version>${mesh.version}</version>
	</dependency>
…
	<repositories>
		<repository>
			<id>maven.gentics.com</id>
			<name>Gentics Maven Repository</name>
			<url>https://maven.gentics.com/maven2</url>
			<releases>
				<enabled>true</enabled>
			</releases>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</repository>
	</repositories>
…
----

==== REST Client

The REST client can be used to interact with all link:/docs/api[Gentics Mesh API Endpoints].

Usage:

[source,java]
----
MeshRestClient client = MeshRestClient.create("localhost", 8080, false);
client.setLogin("username", "password");
client.login().toCompletable().blockingAwait();

NodeListResponse nodes = client.findNodes("demo", new NodeParametersImpl().setLanguages("en")).blockingGet();
for (NodeResponse nodeResponse : nodes.getData()) {
	System.out.println(nodeResponse.getUuid());
	System.out.println(nodeResponse.getFields().getStringField("name").getString());
}
----


==== Monitoring Client

The monitoring client can be used to interact with the link:{{< relref "monitoring.asciidoc" >}}#_endpoints[Monitoring Endpoints].

Usage:

[source,java]
----
MonitoringRestClient client = MonitoringRestClient.create("localhost", 8081);

client.status().toSingle().subscribe(status -> {
	System.out.println(status.getStatus());
}, System.err::println);
----
