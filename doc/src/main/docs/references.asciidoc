:toc-title: APIs

= APIs

== REST API

The link:raml[Gentics Mesh REST API] provides endpoints enabling you to invoke CRUD operations on just ANY Gentics Mesh element. 
There are many things you can do with the REST API. To name a few:

* Obviously you can create, update & fetch multilingual content items as well as tag them.
* But you can also define the schemas, i.e. the content types of your project.
* You can do file upload and image manipulation.
* WebRoot Paths for fetching content by path as well as automatic link resolving greatly simplify the integration with any routing framework.
* Fetching dynamic navigation menus and breadcrumbs based on the content structure will make your editors happy.
* With Elasticsearch under the hood you can search your content.
* You can manage your users and their permissions on content elements.

NOTE: All REST API responses are available in JSON, only, except for binary data.

=== Query Parameters
The REST API end points can be used in combination with a set of query parameters, all of which are documented for the specific end points in the link:raml[Gentics Mesh REST API] reference. Following, we provide an overview of the most common query parameters.

==== Paging Parameters

include::examples/tables/PagingParametersImpl.adoc[]

==== Versioning Parameters

include::examples/tables/VersioningParametersImpl.adoc[]

===== Node Parameters

include::examples/tables/NodeParametersImpl.adoc[]

===== Role Permission Parameters

include::examples/tables/RolePermissionParametersImpl.adoc[]

=== Examples

We have set up a Gentics Mesh instance for demo purposes, that you can play with.

*Let's see what's inside...*

.List all projects. Well, it's just our demo project.
[TIP]
https://demo.getmesh.io/api/v1/projects

.Want to fetch all content items including media? With pretty URLs? Here you go
[TIP]
https://demo.getmesh.io/api/v1/demo/nodes/?resolveLinks=short

.OK, let's load a single content item.
[TIP]
https://demo.getmesh.io/api/v1/demo/nodes/fc3c85be82584ae2bc85be82588ae2b0

.And now forget about UUIDs and do it with its corresponding WebRoot path
[TIP]
https://demo.getmesh.io/api/v1/demo/webroot/automobiles/ford-gt

That's easy. Well, what about images?

.That's the image node
[TIP]
https://demo.getmesh.io/api/v1/demo/nodes/df8beb3922c94ea28beb3922c94ea2f6

.And that's the actual image
[TIP]
https://demo.getmesh.io/api/v1/demo/nodes/df8beb3922c94ea28beb3922c94ea2f6/binary/image

.Let's do some resizing
[TIP]
https://demo.getmesh.io/api/v1/demo/nodes/df8beb3922c94ea28beb3922c94ea2f6/binary/image?width=400

.And now again with a readable WebRoot path
[TIP]
https://demo.getmesh.io/api/v1/demo/webroot/images/ford-gt.jpg?width=400

TIP: The https://insomnia.rest/[Insomnia] REST client can be used to build and invoke requests from your browser to Gentics Mesh.

== HTTP details

//=== Security/SSL

=== Encoding

Gentics Mesh expects and returns UTF-8 encoded data. Sending data in any other encoding format will result in encoding issues.

=== Headers

It is important to set the ```Content-Type: application/json``` when sending JSON data and to also set the ```Accept``` header in order to signal Gentics Mesh that your client is accepting JSON.

[source,bash]
----
Content-Type: application/json
Accept: application/json
----

A request which is not well formatted may fail. Gentics Mesh will do its best to identify the issue and return a meaningful error response in those cases.

=== CORS

The Cross-Origin Resource Sharing mechanism enables Gentics Mesh to configure cross-domain access controls.

You can read up on this topic on the link:https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS[MDN article].

The CORS header handling can be configured using the ```httpServerOptions.corsAllowedOriginPattern``` and ```httpServerOptions.enableCors``` configuration settings.

=== ETag Handling

Most endpoints of the Gentics Mesh REST API will return an ETag header within the response. 

```
ETag:W/"1125-7cc5c6fb"
```

These headers values can be used to implement or utilize existing web caching solutions.

An ETag validation ocures once the ETag is passed along a http request.  

```
If-None-Match:W/"1125-7cc5c6fb"
```

Gentics Mesh will compare the provided ETag with the current state of the content and return a 304 response if the ETag is the same and the response did not change. Updating the requested resource will alter its ETag and thus another request would return the response which includes the current ETag.

//=== Error Codes
