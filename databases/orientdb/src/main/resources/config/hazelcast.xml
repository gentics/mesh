<?xml version="1.0" encoding="UTF-8"?>
<!-- ~ Copyright (c) 2008-2012, Hazel Bilisim Ltd. All Rights Reserved. ~ 
	~ Licensed under the Apache License, Version 2.0 (the "License"); ~ you may 
	not use this file except in compliance with the License. ~ You may obtain 
	a copy of the License at ~ ~ http://www.apache.org/licenses/LICENSE-2.0 ~ 
	~ Unless required by applicable law or agreed to in writing, software ~ distributed 
	under the License is distributed on an "AS IS" BASIS, ~ WITHOUT WARRANTIES 
	OR CONDITIONS OF ANY KIND, either express or implied. ~ See the License for 
	the specific language governing permissions and ~ limitations under the License. -->

<hazelcast
		xsi:schemaLocation="http://www.hazelcast.com/schema/config hazelcast-config-3.3.xsd"
		xmlns="http://www.hazelcast.com/schema/config" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<group>
		<name>${mesh.clusterName}</name>
		<password>orientdb</password>
	</group>
	<properties>
		<property name="hazelcast.phone.home.enabled">false</property>
		<property name="hazelcast.mancenter.enabled">false</property>
		<property name="hazelcast.memcache.enabled">false</property>
		<property name="hazelcast.rest.enabled">false</property>
		<property name="hazelcast.wait.seconds.before.join">5</property>
		<property name="hazelcast.operation.thread.count">1</property>
		<property name="hazelcast.io.thread.count">1</property>
		<property name="hazelcast.operation.generic.thread.count">1</property>
		<property name="hazelcast.client.event.thread.count">1</property>
		<property name="hazelcast.event.thread.count">1</property>
		<property name="hazelcast.heartbeat.interval.seconds">5</property>
		<property name="hazelcast.max.no.heartbeat.seconds">30</property>
		<property name="hazelcast.merge.next.run.delay.seconds">15</property>
	</properties>
	<network>
		<port auto-increment="true">2434</port>
		<join>
			<multicast enabled="true">
				<multicast-group>235.1.1.1</multicast-group>
				<multicast-port>2434</multicast-port>
			</multicast>
		</join>
	</network>
	<executor-service>
		<pool-size>16</pool-size>
	</executor-service>

	<multimap name="__vertx.subs">
		<!--
			Number of backups. If 1 is set as the backup-count for example,
			then all entries of the map will be copied to another JVM for
			fail-safety. 0 means no backup.
		-->
		<backup-count>0</backup-count>
	</multimap>

	<map name="__vertx.haInfo">
		<!--
			Number of backups. If 1 is set as the backup-count for example,
			then all entries of the map will be copied to another JVM for
			fail-safety. 0 means no backup.
		-->
		<backup-count>1</backup-count>
		<!--
			Maximum number of seconds for each entry to stay in the map. Entries that are
			older than <time-to-live-seconds> and not updated for <time-to-live-seconds>
			will get automatically evicted from the map.
			Any integer between 0 and Integer.MAX_VALUE. 0 means infinite. Default is 0.
		-->
		<time-to-live-seconds>0</time-to-live-seconds>
		<!--
			Maximum number of seconds for each entry to stay idle in the map. Entries that are
			idle(not touched) for more than <max-idle-seconds> will get
			automatically evicted from the map. Entry is touched if get, put or containsKey is called.
			Any integer between 0 and Integer.MAX_VALUE. 0 means infinite. Default is 0.
		-->
		<max-idle-seconds>0</max-idle-seconds>
		<!--
			Valid values are:
			NONE (no eviction),
			LRU (Least Recently Used),
			LFU (Least Frequently Used).
			NONE is the default.
		-->
		<eviction-policy>NONE</eviction-policy>
		<!--
			Maximum size of the map. When max size is reached,
			map is evicted based on the policy defined.
			Any integer between 0 and Integer.MAX_VALUE. 0 means
			Integer.MAX_VALUE. Default is 0.
		-->
		<max-size policy="PER_NODE">0</max-size>
		<!--
			When max. size is reached, specified percentage of
			the map will be evicted. Any integer between 0 and 100.
			If 25 is set for example, 25% of the entries will
			get evicted.
		-->
		<eviction-percentage>25</eviction-percentage>
		<!--
			While recovering from split-brain (network partitioning),
			map entries in the small cluster will merge into the bigger cluster
			based on the policy set here. When an entry merge into the
			cluster, there might an existing entry with the same key already.
			Values of these entries might be different for that same key.
			Which value should be set for the key? Conflict is resolved by
			the policy set here. Default policy is PutIfAbsentMapMergePolicy
			There are built-in merge policies such as
			com.hazelcast.map.merge.PassThroughMergePolicy; entry will be added if there is no existing entry for the key.
			com.hazelcast.map.merge.PutIfAbsentMapMergePolicy ; entry will be added if the merging entry doesn't exist in the cluster.
			com.hazelcast.map.merge.HigherHitsMapMergePolicy ; entry with the higher hits wins.
			com.hazelcast.map.merge.LatestUpdateMapMergePolicy ; entry with the latest update wins.
		-->
		<merge-policy>com.hazelcast.map.merge.LatestUpdateMapMergePolicy</merge-policy>
	</map>

	<!-- Used internally in Vert.x to implement async locks -->
	<semaphore name="__vertx.*">
		<initial-permits>1</initial-permits>
	</semaphore>
</hazelcast>